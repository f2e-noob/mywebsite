<!DOCTYPE HTML>
<html>
<head>
<meta charset="utf-8">

<title>Web前端开发工程师夏青的经验积累之JavaScript</title>
<meta name="Keywords" content="夏青工作经验，css经验" >
<meta name="Description" content="夏青作为一名前端开发人精通HTML+CSS网页布局与样式，熟练使用HTML5与CSS3.0。制作出页面能兼容各种主流浏览器。例如IE6、IE8、Fire Fox、Opera等；" />


<script type="text/javascript" src="js/mobi.js"></script>
<script type="text/javascript" src="js/ie6.js"></script>
<script type="text/javascript"  src="js/jquery-1.8.3.min.js"></script>
<script type="text/javascript" src="js/jquery.cookie.js"></script>
<script type="text/javascript" src="js/changeSkin.js"></script>
<script type="text/javascript" src="js/fisheye-iutil.min.js"></script>
<script type="text/javascript" src="js/nav.js"></script>
<script type="text/javascript" src="js/toTop.js"></script>

<script type="text/javascript" src="js/experience.js"></script>

<link rel="stylesheet" type="text/css" href="css/style.css">
<link rel="stylesheet" type="text/css" href="css/skin5.css" id="skin">
 <link rel="icon" href="images/xiaqing.gif" type="image/gif" />
</head>
<body>
<div id="top">

  <div class="right-sidebar">
    <ul id="choose-skin">
      <li data-theme="skin1" class="mosaic">mosaic</li>
      <li data-theme="skin2" class="wall">wall</li>
      <li data-theme="skin3" class="prairie">prairie</li>
      <li data-theme="skin4" class="sky">sky</li>
      <li data-theme="skin5" class="ink cur">ink</li>
    </ul>
    
   </div>
  
  
  <h1 id="logo"><a href="index.html"><img src="images/logo.png" width="227" height="64" alt="夏青-前端开发" /></a></h1>
  <div id="nav">
    <div class="dock-container"> <a href="index.htm"><span>我的首页</span><img src="images/home.png" alt="我的首页" /></a> <a href="work-style1.htm"><span>我的作品</span><img src="images/portfolio.png" alt="我的作品" /></a> <a href="javascript.htm"><span>我的经验</span><img src="images/history.png" alt="我的经验" /></a> <a href="book.htm"><span>我的书架</span><img src="images/book.png" alt="我的书架" /></a> <a href="resume.htm"><span>我的简历</span><img src="images/calendar.png" alt="我的简历" /></a> <a href="contact.htm"><span>与我联系</span><img src="images/email.png" alt="与我联系" /></a> </div>
  </div>
     
  <div id="my-head"><img src="images/head.png" width="510" height="253" /></div>
  </div>
<div id="left-hand" class="animated pulse"><img src="images/LeftSideHand.png" width="202" height="429" /></div>
<div id="right-hand" class="animated fadeInUpBig"><img src="images/RightSideHand.png" width="369" height="446" /></div>
<a id="to-top" href="#top"></a> 
<ul id="experience-nav">
	<li><a href="javascript.htm">JavaScript</a></li>
	<li><a href="jquery.htm">jQuery</a></li>
	<li><a href="ie6.htm">IE6</a></li>
	<li><a href="htmlcss.htm">HTML+CSS</a></li>
	<li><a href="usefulsites.htm">常用网站</a></li>
</ul>

<div id="main"> 
	<h2>经验积累之&nbsp;<strong>JavaScript</strong></h2>
	<div class="tag"><a href="lancer_js/catalog/index.html" target="_blank">lancer javascript library</a></div>
	<div id="experience" class="animated fadeInRight">
		<dl>
			<dt><strong>DOM操作</strong></dt>
			<dd class="canNotRun">
				<table border="0" cellpadding="0" cellspacing="0">
					<caption>
					属性
					</caption>
					<tr>
						<td width="40%"><p>Attributes</p></td>
						<td> 存储节点的属性列表(只读)</td>
					</tr>
					<tr>
						<td>childNodes</td>
						<td> 存储节点的子节点列表(只读)</td>
					</tr>
					<tr>
						<td>dataType</td>
						<td> 返回此节点的数据类型</td>
					</tr>
					<tr>
						<td>Definition</td>
						<td> 以DTD或XML模式给出的节点的定义(只读)</td>
					</tr>
					<tr>
						<td>Doctype</td>
						<td> 指定文档类型节点(只读)</td>
					</tr>
					<tr>
						<td>documentElement</td>
						<td> 返回文档的根元素(可读写)</td>
					</tr>
					<tr>
						<td>firstChild</td>
						<td> 返回当前节点的第一个子节点(只读)</td>
					</tr>
					<tr>
						<td>Implementation</td>
						<td> 返回XMLDOMImplementation对象</td>
					</tr>
					<tr>
						<td>lastChild</td>
						<td>返回当前节点最后一个子节点(只读)</td>
					</tr>
					<tr>
						<td>nextSibling</td>
						<td>返回当前节点的下一个兄弟节点(只读)</td>
					</tr>
					<tr>
						<td>nodeName</td>
						<td>返回节点的名字(只读)</td>
					</tr>
					<tr>
						<td>nodeType</td>
						<td>返回节点的类型(只读)</td>
					</tr>
					<tr>
						<td>nodeTypedValue</td>
						<td> 存储节点值(可读写)</td>
					</tr>
					<tr>
						<td>nodeValue</td>
						<td> 返回节点的文本(可读写)</td>
					</tr>
					<tr>
						<td>ownerDocument</td>
						<td> 返回包含此节点的根文档(只读)</td>
					</tr>
					<tr>
						<td>parentNode</td>
						<td> 返回父节点(只读)</td>
					</tr>
					<tr>
						<td>Parsed</td>
						<td> 返回此节点及其子节点是否已经被解析(只读)</td>
					</tr>
					<tr>
						<td>Prefix</td>
						<td> 返回名称空间前缀(只读)</td>
					</tr>
					<tr>
						<td>preserveWhiteSpace</td>
						<td>指定是否保留空白(可读写)</td>
					</tr>
					<tr>
						<td>previousSibling</td>
						<td> 返回此节点的前一个兄弟节点(只读)</td>
					</tr>
					<tr>
						<td>Text</td>
						<td> 返回此节点及其后代的文本内容(可读写)</td>
					</tr>
					<tr>
						<td>url</td>
						<td> 返回最近载入的XML文档的URL(只读)</td>
					</tr>
					<tr>
						<td>Xml</td>
						<td> 返回节点及其后代的XML表示(只读)</td>
					</tr>
				</table>
				<table border="0" cellspacing="0" cellpadding="0">
					<caption>
					方法
					</caption>
					<tr>
						<td width="40%">a</td>
						<td>为当前节点添加一个新的子节点,放在最后的子节点后</td>
					</tr>
					<tr>
						<td>cloneNode</td>
						<td> 返回当前节点的拷贝</td>
					</tr>
					<tr>
						<td>createAttribute</td>
						<td>创建新的属性</td>
					</tr>
				</table>
				<table border="0" cellspacing="0" cellpadding="0">
					<caption>
					节点操作DOMDocument属性和方法
					</caption>
					<tr>
						<td width="40%"><p>createCDATASection　　</p></td>
						<td> 创建包括给定数据的CDATA段</td>
					</tr>
					<tr>
						<td>createComment　　</td>
						<td> 创建一个注释节点</td>
					</tr>
					<tr>
						<td>createDocumentFragment　　</td>
						<td> 创建DocumentFragment对象</td>
					</tr>
					<tr>
						<td>createElement_x_x　　</td>
						<td> 创建一个元素节点</td>
					</tr>
					<tr>
						<td>createEntityReference　　 </td>
						<td>创建EntityReference对象</td>
					</tr>
					<tr>
						<td>createNode　　</td>
						<td> 创建给定类型,名字和命名空间的节点</td>
					</tr>
					<tr>
						<td>createPorcessingInstruction　　 </td>
						<td>创建操作指令节点</td>
					</tr>
					<tr>
						<td>createTextNode　　</td>
						<td> 创建包括给定数据的文本节点</td>
					</tr>
					<tr>
						<td>getElementsByTagName　　</td>
						<td> 返回指定名字的元素集合</td>
					</tr>
					<tr>
						<td>hasChildNodes　　</td>
						<td> 返回当前节点是否有子节点</td>
					</tr>
					<tr>
						<td>insertBefore　　</td>
						<td> 在指定节点前插入子节点</td>
					</tr>
					<tr>
						<td>Load　　</td>
						<td> 导入指定位置的XML文档</td>
					</tr>
					<tr>
						<td>loadXML　　</td>
						<td> 导入指定字符串的XML文档</td>
					</tr>
					<tr>
						<td>removeChild　　 </td>
						<td>从子结点列表中删除指定的子节点</td>
					</tr>
					<tr>
						<td>replaceChild　　</td>
						<td> 从子节点列表中替换指定的子节点</td>
					</tr>
					<tr>
						<td>Save　　</td>
						<td> 把XML文件存到指定节点</td>
					</tr>
					<tr>
						<td>selectNodes　　 </td>
						<td>对节点进行指定的匹配,并返回匹配节点列表</td>
					</tr>
					<tr>
						<td>selectSingleNode　　 </td>
						<td>对节点进行指定的匹配,并返回第一个匹配节点</td>
					</tr>
					<tr>
						<td>transformNode</td>
						<td>使用指定的样式表对节点及其后代进行转换</td>
					</tr>
					<tr>
						<td>transformNodeToObject　　 </td>
						<td>使用指定的样式表将节点及其后代转换为对象</td>
					</tr>
				</table>
				<table width="100%" border="0" cellspacing="0" cellpadding="0">
					<tr>
						<td width="40%">document.documentElement</td>
						<td>返回文档的根节点</td>
					</tr>
					<tr>
						<td>document.activeElement</td>
						<td>返回当前文档中被击活的标签节点</td>
					</tr>
					<tr>
						<td>event.fromElement</td>
						<td>返回鼠标移出的源节点</td>
					</tr>
					<tr>
						<td>event.toElement</td>
						<td>返回鼠标移入的源节点</td>
					</tr>
					<tr>
						<td>event.srcElement</td>
						<td>返回激活事件的源节点</td>
					</tr>
					<tr>
						<td>node.parentNode,node.parentElement</td>
						<td>返回父节点</td>
					</tr>
					<tr>
						<td>node.childNodes</td>
						<td>返回子节点集合（包含文本节点及标签节点）</td>
					</tr>
					<tr>
						<td>node.children</td>
						<td>返回子标签节点集合</td>
					</tr>
					<tr>
						<td>node.textNodes</td>
						<td>返回子文本节点集合</td>
					</tr>
					<tr>
						<td>node.firstChild</td>
						<td>返回第一个子节点</td>
					</tr>
					<tr>
						<td>node.lastChild</td>
						<td>返回最后一个子节点</td>
					</tr>
					<tr>
						<td>node.nextSibling</td>
						<td>返回同属下一个节点</td>
					</tr>
					<tr>
						<td>node.previousSibling</td>
						<td>返回同属上一个节点</td>
					</tr>
					<tr>
						<td>node.a(oNode)</td>
						<td>追加子节点：</td>
					</tr>
					<tr>
						<td>node.applyElment(oNode,sWhere)<br>
							sWhere有两个值：outside  / inside</td>
						<td>应用标签节点</td>
					</tr>
					<tr>
						<td><p>node.insertBefore()</p>
							<p>node.insertAdjacentElement()</p>
							<p>node.replaceAdjacentText()</p></td>
						<td>插入节点</td>
					</tr>
					<tr>
						<td><p>node.remove()</p>
							<p>node.removeChild()</p>
							<p>node.removeNode()</p></td>
						<td>删除节点</td>
					</tr>
					<tr>
						<td><p>node.replaceChild()</p>
							<p>node.replaceNode()</p>
							<p>node.swapNode()</p></td>
						<td>替换节点</td>
					</tr>
					<tr>
						<td>node.cloneNode(bAll)</td>
						<td>返回复制复制节点引用</td>
					</tr>
					<tr>
						<td>node.contains()</td>
						<td>是否有子节点</td>
					</tr>
					<tr>
						<td>node.hasChildNodes()</td>
						<td>是否有子节点</td>
					</tr>
				</table>
			</dd>
		</dl>
		<dl>
			<dt>用变量执行函数</dt>
			<dd>function myFunction(str,func){<br>
				return	str[func]();<br>
				}<br>
				newstr = myFunction(&quot;WHAT UP&quot;,&quot;toLowerCase&quot;);<br>
				alert(newstr)</dd>
		</dl>
		<dl>
			<dt>多种构造函数</dt>
			<dd>
				<p>/***传统的创建对象***/<br>
					var person = new Object();<br>
					person.name = &quot;lancer&quot;;<br>
					person.age = 24;<br>
					person.job = &quot;UI&quot;;<br>
					person.sayName = function(){<br>
					alert(this.name); <br>
					}<br>
					person.sayName();</p>
				<p>/***工厂模式***/<br>
					function createPerson(name,age,job){<br>
					var o = new Object();<br>
					o.name = name;<br>
					o.age = age;<br>
					o.job = job;<br>
					o.sayName = function(){<br>
					alert(o.name); <br>
					}<br>
					return o;<br>
					}<br>
					var person1 = createPerson(&quot;lancer&quot;,24,&quot;UI&quot;);<br>
					person1.sayName();</p>
				<p>/***构造函数***/<br>
					function Person(name,age,job){<br>
					this.name = name;<br>
					this.age = age;<br>
					this.job =job;<br>
					this.sayName = function(){<br>
					alert(this.name)<br>
					}<br>
					}<br>
					var person1 = createPerson(&quot;lancer&quot;,24,&quot;UI&quot;);<br>
					person1.sayName();</p>
				<p>/***原型模式***/<br>
					function Person(){<br>
					}<br>
					Person.prototype.name =&quot;lancer&quot;;<br>
					Person.prototype.age =24;<br>
					Person.prototype.job = &quot;UI&quot;;<br>
					Person.prototype.sayName = function(){<br>
					alert(this.name) <br>
					}<br>
					var person1 = new Person();<br>
					person1.sayName();<br>
					var person2 = new Person();<br>
					person2.name =&quot;lara&quot;<br>
					person2.sayName();<br>
				</p>
				<p>/***简单原型模式***/<br>
					function Person(){<br>
					}<br>
					Person.prototype = {<br>
					name : &quot;lancer&quot;,<br>
					age : 24,<br>
					job : &quot;UI&quot;,<br>
					sayName : function(){<br>
					alert(this.name) <br>
					}<br>
					};<br>
					var person1 = new Person();<br>
					person1.sayName();<br>
				</p>
				<p>/***构造函数和原型模式***/<br>
					function Person(name,age,job){<br>
					this.name = name;<br>
					this.age = age;<br>
					this.job =job;<br>
					}<br>
					Person.prototype = {<br>
					constructor :Person, <br>
					sayName : function(){<br>
					alert(this.name) <br>
					}<br>
					};<br>
					var person1 = new Person(&quot;lancer&quot;,&quot;24&quot;,&quot;UI&quot;);<br>
					person1.sayName();<br>
				</p>
				<p>/***动态原型模式***/<br>
					function Person(name,age,job){<br>
					this.name = name;<br>
					this.age = age;<br>
					this.job =job;<br>
					}<br>
					if(typeof this.sayName !=&quot;function&quot;){<br>
					Person.prototype = {<br>
					constructor :Person, <br>
					sayName : function(){<br>
					alert(this.name) <br>
					}<br>
					};<br>
					}<br>
					var person1 = new Person(&quot;lancer&quot;,&quot;24&quot;,&quot;UI&quot;);<br>
					person1.sayName();</p>
				<p>/***稳妥构造函数***/<br>
					var Person = function(name,age,job){<br>
					var O = new Object();<br>
					O.sayName = function(){<br>
					alert(name); <br>
					};<br>
					return O<br>
					}<br>
					var person1 = Person(&quot;lancer&quot;,24,&quot;UI&quot;);<br>
					person1.sayName();</p>
			</dd>
		</dl>
		<dl>
			<dt>XMLhttpRequest</dt>
			<dd>
				<p>// JavaScript Document<br>
					var xmlHttp;<br>
					function creatXMLHttpRequest(){<br>
					if(window.ActiveXObject)<br>
					{<br>
					xmlHttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); <br>
					} <br>
					else if (window.XMLHttpRequest){<br>
					xmlHttp = new XMLHttpRequest(); <br>
					}<br>
					<br>
					}<br>
					function startRequest(/*requestedList*/){<br>
					//requestType = requestedList;<br>
					creatXMLHttpRequest();<br>
					xmlHttp.onreadystatechange = handleStateChange;<br>
					xmlHttp.open(&quot;GET&quot;,&quot;data.xml&quot;,true);<br>
					xmlHttp.send(null); <br>
					}<br>
					function handleStateChange(){<br>
					if(xmlHttp.readyState == 4){<br>
					if(xmlHttp.status == 200){<br>
					showXml();<br>
					}<br>
					} <br>
					}</p>
				<p>function showXml()<br>
					{<br>
					document.getElementById(&quot;content&quot;).innerHTML = xmlHttp.responseText<br>
					}</p>
				<p>&nbsp;</p>
			</dd>
		</dl>
		<dl>
			<dt>取消默认操作</dt>
			<dd>&lt;a href=&quot;http://www.baidu.com&quot; id=&quot;gotoBaiDu&quot;&gt;百度&lt;/a&gt;<br>
				&lt;script type=&quot;text/javascript&quot;&gt;<br>
				function killLinks(event)<br>
				{<br>
				event.preventDefault();<br>
				alert(&quot;超链接被取消&quot;)<br>
				}<br>
				document.getElementById(&quot;gotoBaiDu&quot;).addEventListener(&quot;click&quot;,killLinks,true);<br>
				&lt;/script&gt;</dd>
		</dl>
		<dl>
			<dt>阻止冒泡与重定向</dt>
			<dd>
				<p>&lt;script type=&quot;text/javascript&quot;&gt;<br>
					function gotClock(who)<br>
					{<br>
					document.getElementById(&quot;result&quot;).innerHTML += who + &quot;被单击了&quot; + &quot;&lt;br /&gt;&quot;;<br>
					event.cancelBubble = true ;<br>
					document.getElementById(&quot;forward&quot;).fireEvent(&quot;onClick&quot;,event);<br>
					} <br>
					function gotClock2(who)<br>
					{<br>
					document.getElementById(&quot;result&quot;).innerHTML += who + &quot;被单击了&quot; + &quot;&lt;br /&gt;&quot;;<br>
					event.cancelBubble = true ;<br>
					} <br>
					&lt;/script&gt;</p>
				<p>&lt;div id=&quot;d&quot; onClick=&quot;gotClock('div')&quot;&gt;<br>
					&lt;a href=&quot;#&quot; onClick=&quot;gotClock('A')&quot;&gt;sssssssssssss&lt;/a&gt;<br>
					&lt;/div&gt;<br>
					&lt;div id=&quot;forward&quot; onClick=&quot;gotClock2('forward')&quot;&gt;&lt;/div&gt;<br>
					&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</p>
			</dd>
		</dl>
		<dl>
			<dt>prototype</dt>
			<dd>var dd = function()<br>
				{ <br>
				return dd.fn.init();<br>
				}<br>
				dd.fn = dd.prototype =<br>
				{<br>
				init : function(){ return this;},<br>
				A1 :	function() { alert(&quot;a1&quot;)},<br>
				A2 :	function() { alert(&quot;a2&quot;)}<br>
				}<br>
				dd().A2()</dd>
		</dl>
		<dl>
			<dt>闭包写法</dt>
			<dd>
				<p>if (typeof Barclaycard !== 'object') var Barclaycard={};</p>
				<p>Barclaycard.toolTipManager = new (function(){<br>
					this.onReady = function(){<br>
					on() <br>
					};<br>
					var on = function(){<br>
					alert(&quot;on&quot;) <br>
					};<br>
					});<br>
					$(document).ready(function(){<br>
					Barclaycard.toolTipManager.onReady();<br>
					});</p>
				<p>-------------------------------------------------</p>
				<p>Barclaycard.toolTipManager = function(){<br>
					this.onReady = function(){<br>
					on() <br>
					};<br>
					var on = function(){<br>
					alert(&quot;on&quot;) <br>
					};<br>
					};<br>
					$(document).ready(function(){<br>
					( new Barclaycard.toolTipManager()).onReady();<br>
					});</p>
				<p>--------------------------------------------------</p>
				<p>if(typeof lancer!==&quot;object&quot;){ var lancer={};} <br>
					lancer.showAlert = new function(){<br>
					this.onReady = function(e){<br>
					alert(e) <br>
					} <br>
					}<br>
					$(function(){<br>
					lancer.showAlert.onReady(&quot;3333&quot;); <br>
					});</p>
			</dd>
		</dl>
		<dl>
			<dt>操作cookie</dt>
			<dd> function getCookie(name){               // 返回名为name的Cookie <br>
				var str = document.cookie;          // 获取Cookie字符串 <br>
				if(!str || str.indexOf(name + &quot;=&quot;) &lt; 0) // 寻找name= <br>
				return; <br>
				var cookies = str.split(&quot;; &quot;);      // 用;将所有的Cookie分隔开 <br>
				for(var i=0; i&lt;cookies.length; i++){    // 遍历每个Cookie <br>
				var cookie = cookies[i];        // 当前Cookie <br>
				if(cookie.indexOf(name + &quot;=&quot;) == 0){    // 如果名字为name <br>
				var value = cookie.substring(name.length + 1);  // 获取value <br>
				return decodeURI(value);    // 将value解码，并返回 <br>
				} <br>
				} <br>
				} <br>
				function setCookie(name, value){        // 设置Cookie <br>
				document.cookie = name + &quot;=&quot; + encodeURI(value);        // 直接设置即可 <br>
				} </dd>
		</dl>
		<dl>
			<dt>抛出多个异常</dt>
			<dd>function Ca(){<br>
				try<br>
				{<br>
				var text1 = document.getElementById(&quot;textfield&quot;).value<br>
				if(text1 &lt; 0)<br>
				{<br>
				throw 1;<br>
				}<br>
				else if(text1 == 0)<br>
				{<br>
				throw 2; <br>
				}<br>
				else<br>
				{<br>
				throw 3;<br>
				} <br>
				}<br>
				catch (ex if ex==1)<br>
				{<br>
				alert(&quot;不能小于0&quot;);<br>
				}<br>
				catch (ex if ex==2)<br>
				{<br>
				alert(&quot;不能等于0&quot;); <br>
				}<br>
				catch (ex if ex==3)<br>
				{<br>
				alert(&quot;不能大于0&quot;); <br>
				}<br>
				finally<br>
				{<br>
				alert(&quot;都会执行&quot;) <br>
				}<br>
				}</dd>
		</dl>
		<dl>
			<dt>try-catch</dt>
			<dd>
				<p>&lt;script type=&quot;text/javascript&quot;&gt;<br>
					var txt=&quot;&quot;<br>
					function message()<br>
					{<br>
					try<br>
					{<br>
					adddlert(&quot;Welcome guest!&quot;)<br>
					}<br>
					catch(err)<br>
					{<br>
					txt=&quot;此页面存在一个错误。\n\n&quot;<br>
					txt+=&quot;错误描述: &quot; + err.description + &quot;\n\n&quot;<br>
					txt+=&quot;点击OK继续。\n\n&quot;<br>
					alert(txt)<br>
					}<br>
					}<br>
					&lt;/script&gt;</p>
				<p>&lt;input type=&quot;button&quot; value=&quot;View message&quot; onclick=&quot;message()&quot; /&gt;</p>
			</dd>
		</dl>
		<dl>
			<dt>获取客户端操作系统</dt>
			<dd>
				<p>function detectOS() {</p>
				<p> var sUserAgent = navigator.userAgent;<br>
					var isWin = (navigator.platform == &quot;Win32&quot;) || (navigator.platform == &quot;Windows&quot;);<br>
					var isMac = (navigator.platform == &quot;Mac68K&quot;) || (navigator.platform == &quot;MacPPC&quot;) || (navigator.platform == &quot;Macintosh&quot;) || (navigator.platform == &quot;MacIntel&quot;);<br>
					if (isMac) return &quot;Mac&quot;;<br>
					var isUnix = (navigator.platform == &quot;X11&quot;) &amp;&amp; !isWin &amp;&amp; !isMac;<br>
					if (isUnix) return &quot;Unix&quot;;<br>
					var isLinux = (String(navigator.platform).indexOf(&quot;Linux&quot;) &gt; -1);<br>
					if (isLinux) return &quot;Linux&quot;;<br>
					if (isWin) {<br>
					var isWin2K = sUserAgent.indexOf(&quot;Windows NT 5.0&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows 2000&quot;) &gt; -1;<br>
					if (isWin2K) return &quot;Win2000&quot;;<br>
					var isWinXP = sUserAgent.indexOf(&quot;Windows NT 5.1&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows XP&quot;) &gt; -1;<br>
					if (isWinXP) return &quot;WinXP&quot;;<br>
					var isWin2003 = sUserAgent.indexOf(&quot;Windows NT 5.2&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows 2003&quot;) &gt; -1;<br>
					if (isWin2003) return &quot;Win2003&quot;;<br>
					var isWinVista= sUserAgent.indexOf(&quot;Windows NT 6.0&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows Vista&quot;) &gt; -1;<br>
					if (isWinVista) return &quot;WinVista&quot;;<br>
					var isWin7 = sUserAgent.indexOf(&quot;Windows NT 6.1&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows 7&quot;) &gt; -1;<br>
					if (isWin7) return &quot;Win7&quot;;<br>
					}</p>
				<p> return &quot;other&quot;;<br>
					}<br>
				</p>
				<p>document.writeln(&quot;您的操作系统是：&quot; + detectOS());<br>
				</p>
			</dd>
		</dl>
		<dl>
			<dt>完整获取IE浏览器信息</dt>
			<dd>浏览器版信息是可以通过javascript得到的<br>
				浏览器代码名称:navigator.appCodeName<br>
				浏览器名称:navigator.appName<br>
				浏览器版本号:navigator.appVersion<br>
				是否支持Java:navigator.javaEnabled()<br>
				MIME类型数:navigator.mimeTypes.length<br>
				操作系统平台:navigator.platform<br>
				插件数:navigator.plugins.length<br>
				用户代理:navigator.userAgent<br>
				<br>
				EX：<br>
				&lt;html&gt;<br>
				&lt;head&gt;<br>
				&lt;title&gt;JS完整获取IE浏览器信息&lt;/title&gt;<br>
				&lt;/head&gt;<br>
				&lt;body leftmargin=&quot;0&quot; topmargin=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;<br>
				&lt;table width=&quot;435&quot; border=&quot;1&quot; cellspacing=&quot;3&quot; cellpadding=&quot;0&quot;&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;浏览器类型&lt;/td&gt;<br>
				&lt;td&gt; <br>
				&lt;script&gt;document.write(navigator.appName)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td &gt;浏览器版本&lt;/td&gt;<br>
				&lt;td &gt; <br>
				&lt;script&gt;document.write(navigator.appVersion)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;浏览器语言&lt;/td&gt;<br>
				&lt;td&gt; <br>
				&lt;script&gt;document.write(navigator.browserLanguage)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td &gt;CPU类型&lt;/td&gt;<br>
				&lt;td &gt; <br>
				&lt;script&gt;document.write(navigator.cpuClass)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;操作系统&lt;/td&gt;<br>
				&lt;td&gt; <br>
				&lt;script&gt;document.write(navigator.platform)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td &gt;系统语言&lt;/td&gt;<br>
				&lt;td &gt; <br>
				&lt;script&gt;document.write(navigator.systemLanguage)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;用户语言;&lt;/td&gt;<br>
				&lt;td&gt; <br>
				&lt;script&gt;document.write(navigator.userLanguage)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td &gt;在线情况&lt;/td&gt;<br>
				&lt;td &gt; <br>
				&lt;script&gt;document.write(navigator.onLine)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;屏幕分辨率&lt;/td&gt;<br>
				&lt;td&gt;      &lt;script&gt;document.write(window.screen.width+&quot;x&quot;+window.screen.height)&lt;/script&gt;&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;颜色&lt;/td&gt;<br>
				&lt;td&gt; &lt;script&gt;document.write(window.screen.colorDepth+&quot;位&quot;)&lt;/script&gt;&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;字体平滑&lt;/td&gt;<br>
				&lt;td&gt;&lt;script&gt;document.write(window.screen.fontSmoothingEnabled)&lt;/script&gt;&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;appMinorVersion&lt;/td&gt;<br>
				&lt;td&gt; <br>
				&lt;script&gt;document.write(navigator.appMinorVersion)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td &gt;appCodeName&lt;/td&gt;<br>
				&lt;td &gt; <br>
				&lt;script&gt;document.write(navigator.appCodeName)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;cookieEnabled&lt;/td&gt;<br>
				&lt;td&gt; <br>
				&lt;script&gt;document.write(navigator.cookieEnabled)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td &gt;userAgent&lt;/td&gt;<br>
				&lt;td &gt; <br>
				&lt;script&gt;document.write(navigator.userAgent)&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td&gt;javaEnabled&lt;/td&gt;<br>
				&lt;td&gt; <br>
				&lt;script&gt;document.write(navigator.javaEnabled())&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;tr&gt;<br>
				&lt;td &gt;taintEnabled&lt;/td&gt;<br>
				&lt;td &gt; <br>
				&lt;script&gt;document.write(navigator.taintEnabled())&lt;/script&gt;<br>
				&lt;/td&gt;<br>
				&lt;/tr&gt;<br>
				&lt;/table&gt;<br>
				&lt;/body&gt;<br>
				&lt;/html&gt; </dd>
		</dl>
		<dl>
			<dt>表单验证</dt>
			<dd>
				<p>&lt;script type=&quot;text/javascript&quot;&gt;<br>
					/*密码*/<br>
					function password()<br>
					{<br>
					var password = document.getElementById(&quot;password&quot;).value;<br>
					var ts = document.getElementById(&quot;tsPassword&quot;);<br>
					if (password.length &gt; 18 || password.length &lt; 6 &amp;&amp; password.length &gt; 0)<br>
					{<br>
					ts.innerHTML = &quot;密码为6到18位字符&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else if (password == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请输入您的密码&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;密码格式正确&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					$(&quot;#submitError&quot;).css(&quot;display&quot;, &quot;none&quot;);<br>
					return true;<br>
					}<br>
					}<br>
					/*确认密码*/<br>
					function confirmPassword()<br>
					{<br>
					var password = document.getElementById(&quot;password&quot;).value;<br>
					var confirmPassword = document.getElementById(&quot;confirmPassword&quot;).value;<br>
					var ts = document.getElementById(&quot;tsConfirmPassword&quot;);<br>
					if (password !== confirmPassword &amp;&amp; confirmPassword !== &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;两次密码不一致&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else if (confirmPassword == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请再次输入您的密码&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;密码确认通过!&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					$(&quot;#submitError&quot;).css(&quot;display&quot;, &quot;none&quot;);<br>
					return true;<br>
					}<br>
					}<br>
					/*姓名*/<br>
					function username()<br>
					{<br>
					var username = document.getElementById(&quot;username&quot;).value;<br>
					var ts = document.getElementById(&quot;tsUsername&quot;);<br>
					var verc = !(/^[A-Za-z\u4E00-\uFA29]{2,20}$/.test(username));</p>
				<p> if (verc &amp;&amp; username !== &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;真实姓名只能含汉字、大写字母，且至少两个字&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					if (username == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请填写您的姓名&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;姓名格式正确!&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					$(&quot;#submitError&quot;).css(&quot;display&quot;, &quot;none&quot;);<br>
					return true;<br>
					}<br>
					}<br>
					/*手机*/<br>
					function moblie()<br>
					{<br>
					var moblie = document.getElementById(&quot;moblie&quot;).value;<br>
					var ts = document.getElementById(&quot;tsMoblie&quot;);<br>
					var verc = !(/^(13[0-9]|15[0|3|6|7|8|9]|18[8|9])\d{8}$/.test(moblie));<br>
					if (verc &amp;&amp; moblie !== &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;手机号码为纯数字，长度11位&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else if (moblie == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请输入您的手机号码&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;手机号码可以使用!&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					$(&quot;#submitError&quot;).css(&quot;display&quot;, &quot;none&quot;);<br>
					return true;<br>
					}<br>
					}<br>
					/*电话*/<br>
					function telephone()<br>
					{<br>
					var telephone = document.getElementById(&quot;telephone&quot;).value;<br>
					var ts = document.getElementById(&quot;tsTelephone&quot;);<br>
					var verc = !(/(^[0-9]{3,4}\-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^\([0-9]{3,4}\)[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)/.test(telephone));</p>
				<p> if (telephone.length &lt; 8 || verc &amp;&amp; telephone !== &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;电话码为纯数字，长度8位&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else if (telephone == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请输入您的电话号码&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;电话号码可以使用!&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					$(&quot;#submitError&quot;).css(&quot;display&quot;, &quot;none&quot;);<br>
					return true;<br>
					}<br>
					}<br>
					/*电子邮件*/<br>
					function email()<br>
					{<br>
					var email = document.getElementById(&quot;email&quot;).value;<br>
					var ts = document.getElementById(&quot;tsEmail&quot;);<br>
					var verc = !(/^[\w\-\_\.u4e00-\u9fa5]+@[\w\-\_u4e00-\u9fa5]+(\.[\w\-\_u4e00-\u9fa5]+)+$/.test(email));<br>
					if (verc &amp;&amp; email !== &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;Email格式不正确&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else if (email == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请输入您的邮箱&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					if (CheckUser(document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtEmailAddress&quot;)))<br>
					{<br>
					ts.innerHTML = &quot;此邮箱可以使用!&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					$(&quot;#submitError&quot;).css(&quot;display&quot;, &quot;none&quot;);<br>
					return true;<br>
					}<br>
					}<br>
					}<br>
					/*提交*/<br>
					function submit()<br>
					{<br>
					$(&quot;#submitError&quot;).css(&quot;display&quot;, &quot;none&quot;);<br>
					if (password() &amp;&amp; confirmPassword() &amp;&amp; username() &amp;&amp; moblie() &amp;&amp; telephone() &amp;&amp; email())<br>
					{<br>
					return true;<br>
					}<br>
					else<br>
					{<br>
					$(&quot;#submitError&quot;).css(&quot;display&quot;, &quot;inline&quot;);<br>
					return false;<br>
					}<br>
					} </p>
				<p>&lt;/script&gt; </p>
				<p> </p>
				<p>PS：应用于企业带驾后台系统 </p>
				<p> </p>
				<p>&lt;script type=&quot;text/javascript&quot;&gt;<br>
					/*EMAIL*/<br>
					function checkemail()<br>
					{<br>
					var email = document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtEmailAddress&quot;).value;<br>
					var ts = document.getElementById(&quot;check_email&quot;);<br>
					illegalemail = !(/^[\w\-\_\.u4e00-\u9fa5]+@[\w\-\_u4e00-\u9fa5]+(\.[\w\-\_u4e00-\u9fa5]+)+$/.test(email));<br>
					if (illegalemail &amp;&amp; email !== &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;Email格式不正确&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else if (email == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请输入您的邮箱&quot;;<br>
					ts.style.color = &quot;#666&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					if (CheckUser(document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtEmailAddress&quot;)))<br>
					{<br>
					ts.innerHTML = &quot;此邮箱可以使用!&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					return true;<br>
					}<br>
					// ts.innerHTML =&quot;此邮箱可以使用!&quot;;<br>
					// ts.style.color=&quot;#049b07&quot;;<br>
					// return true;<br>
					}<br>
					}<br>
					/*账户密码*/<br>
					function checkpassword()<br>
					{<br>
					var postcode = document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtPassword&quot;).value;<br>
					var ts = document.getElementById(&quot;check_password&quot;);<br>
					/*var reg1=!(/^[1-9]\d{5}(?!d)$/.test(postcode));*/<br>
					if (postcode.length &gt; 18 || postcode.length &lt; 6 &amp;&amp; postcode.length &gt; 0)<br>
					{<br>
					ts.innerHTML = &quot;密码为6到18位字符&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else if (postcode == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请输入您的密码&quot;;<br>
					ts.style.color = &quot;#666&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;密码格式正确!&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					return true;<br>
					}<br>
					}<br>
					/*密码确认*/<br>
					function checkyzmm()<br>
					{<br>
					var mima = document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtPassword&quot;).value;<br>
					var mima1 = document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtRePass&quot;).value;<br>
					var ts = document.getElementById(&quot;yzts&quot;);<br>
					if (mima !== mima1 &amp;&amp; mima1 !== &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;两次密码不一致!&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					/*else if(mima1.length &lt; 6 || mima1.length &gt; 18)<br>
					{<br>
					ts.innerHTML =&quot;密码不能少于6位,大于18位!&quot;;<br>
					ts.style.color=&quot;#ff0000&quot;;<br>
					return false;<br>
					}*/<br>
					else if (mima1 == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请再次输入您的密码&quot;;<br>
					ts.style.color = &quot;#666&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;密码确认通过!&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					return true;<br>
					}<br>
					}<br>
					/*手机号码*/<br>
					function checkcellphone()<br>
					{<br>
					var cellphone = document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtCellPhone&quot;).value;<br>
					var ts = document.getElementById(&quot;check_cellphone&quot;);<br>
					var reg1 = !(/^1[35]\d{9}$/.test(cellphone));<br>
					if (reg1 &amp;&amp; cellphone !== &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;手机号码为纯数字，长度11位。&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else if (cellphone == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请输入您的手机号码！&quot;;<br>
					ts.style.color = &quot;#666&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					if (CheckPhone(document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtCellPhone&quot;)))<br>
					{<br>
					ts.innerHTML = &quot;电话号码可以使用!&quot;;<br>
					ts.style.color = &quot;#049b07&quot;;<br>
					return true;<br>
					}<br>
					// ts.innerHTML =&quot;电话号码可以使用!&quot;;<br>
					// ts.style.color=&quot;#049b07&quot;;<br>
					// return true;<br>
					}<br>
					}<br>
					/*驾照*/<br>
					//function jiaz(){<br>
					// var yeardd = document.getElementById (&quot;ctl00_ContentPlaceHolder1_ddlYear&quot;).value;<br>
					// var monthdd = document.getElementById (&quot;ctl00_ContentPlaceHolder1_ddlMouth&quot;).value;<br>
					// var nojiaz=document.getElementById(&quot;ctl00_ContentPlaceHolder1_nojiaz&quot;);<br>
					// var after=document.getElementById(&quot;ctl00_ContentPlaceHolder1_after&quot;);<br>
					// var ts=document.getElementById(&quot;jiazhaotime&quot;);<br>
					// if(nojiaz.checked==false&amp;&amp;(yeardd==&quot;&quot;||monthdd==&quot;&quot;)&amp;&amp;after.checked==false){<br>
					// ts.innerHTML =&quot;请选择驾照领取时间！&quot;;<br>
					// ts.style.color=&quot;#666&quot;;<br>
					// return false;<br>
					// }<br>
					// if(nojiaz.checked==true||(yeardd!==&quot;&quot;&amp;&amp;monthdd!==&quot;&quot;)||after.checked==true){<br>
					// ts.innerHTML =&quot;请选择驾照领取时间！&quot;;<br>
					// ts.style.color=&quot;#aaa&quot;;<br>
					// return true;<br>
					// }<br>
					//<br>
					// }<br>
					function jiaz()<br>
					{<br>
					var yeardd = document.getElementById(&quot;ctl00_ContentPlaceHolder1_ddlYear&quot;).value;<br>
					var monthdd = document.getElementById(&quot;ctl00_ContentPlaceHolder1_ddlMouth&quot;).value;<br>
					//var nojiaz=document.getElementById(&quot;nojiaz&quot;);<br>
					//var after=document.getElementById(&quot;after&quot;);<br>
					var ts = document.getElementById(&quot;jiazhaotime&quot;);<br>
					if (yeardd == &quot;&quot; || monthdd == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请选择驾照领取时间&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;请选择驾照领取时间&quot;;<br>
					ts.style.color = &quot;#aaa&quot;;<br>
					return true;<br>
					}<br>
					}<br>
					/*用户名*/<br>
					function userna()<br>
					{<br>
					var name = document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtFname&quot;).value;<br>
					var ts = document.getElementById(&quot;inputusername&quot;);<br>
					if (name == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请填写用户名&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;&quot;<br>
					return true;<br>
					}<br>
					}<br>
					function truename()<br>
					{<br>
					var username = document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtFname&quot;).value;<br>
					var ts = document.getElementById(&quot;check_realname&quot;);<br>
					var reg1 = !(/^[A-Z\u4E00-\uFA29]{2,20}$/.test(username));<br>
					if (reg1 &amp;&amp; username !== &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;真实姓名只能含汉字、大写字母,且至少两个字&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					return false;<br>
					}<br>
					if (username == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请填写您的姓名&quot;;<br>
					ts.style.color = &quot;#666&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot; &quot;;<br>
					ts.style.color = &quot;#666&quot;;<br>
					return true;<br>
					}<br>
					}<br>
					/*证件号码*/<br>
					function checkvoucher()<br>
					{<br>
					var name = document.getElementById(&quot;ctl00_ContentPlaceHolder1_txtIdCardNo&quot;).value;<br>
					var ts = document.getElementById(&quot;check_voucher&quot;);<br>
					if (name == &quot;&quot;)<br>
					{<br>
					ts.innerHTML = &quot;请输入您的证件号码&quot;;<br>
					ts.style.color = &quot;#666&quot;;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					ts.innerHTML = &quot;&quot;<br>
					return true;<br>
					}<br>
					}<br>
					function submi()<br>
					{<br>
					if (checkemail() &amp;&amp; checkpassword() &amp;&amp; checkyzmm() &amp;&amp; checkcellphone() &amp;&amp; jiaz() &amp;&amp; truename() &amp;&amp; checkvoucher())<br>
					{<br>
					parent.document.getElementById(&quot;ctl00_ContentPlaceHolder1_btnSubmit&quot;).disabled = false;<br>
					return true;<br>
					}<br>
					else<br>
					{<br>
					parent.document.getElementById(&quot;ctl00_ContentPlaceHolder1_btnSubmit&quot;).disabled = true;<br>
					return false;<br>
					}<br>
					}<br>
					function CheckUser(txtUser)<br>
					{<br>
					var ts = document.getElementById(&quot;check_email&quot;);<br>
					var user_name = txtUser.value;<br>
					if (user_name != &quot;&quot;)<br>
					{<br>
					var out = GetXmlResponse(&quot;clubregister.aspx?cu=&quot; + user_name);<br>
					if (out == 'Y')<br>
					{<br>
					ts.innerHTML = &quot;邮箱已存在&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					// document.getElementById(&quot;ctl00_ContentPlaceHolder1_btnSubmit&quot;).disabled=true;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					return true;<br>
					}<br>
					}<br>
					}<br>
					function CheckPhone(txtPhone)<br>
					{<br>
					var ts = document.getElementById(&quot;check_cellphone&quot;);<br>
					var user_name = txtPhone.value;<br>
					if (user_name != &quot;&quot;)<br>
					{<br>
					var out = GetXmlResponse(&quot;clubregister.aspx?phone=&quot; + user_name);<br>
					if (out == 'Y')<br>
					{<br>
					ts.innerHTML = &quot;手机已存在&quot;;<br>
					ts.style.color = &quot;#ff0000&quot;;<br>
					// document.getElementById(&quot;ctl00_ContentPlaceHolder1_btnSubmit&quot;).disabled=true;<br>
					return false;<br>
					}<br>
					else<br>
					{<br>
					return true;<br>
					}<br>
					}<br>
					}<br>
					&lt;/script&gt; </p>
				<p> </p>
				<p>PS：提取于嗨友会注册页 </p>
				<p> </p>
				<p>/*身份证*/<br>
					var vcity = { 11: &quot;北京&quot;, 12: &quot;天津&quot;, 13: &quot;河北&quot;, 14: &quot;山西&quot;, 15: &quot;内蒙古&quot;,<br>
					21: &quot;辽宁&quot;, 22: &quot;吉林&quot;, 23: &quot;黑龙江&quot;, 31: &quot;上海&quot;, 32: &quot;江苏&quot;,<br>
					33: &quot;浙江&quot;, 34: &quot;安徽&quot;, 35: &quot;福建&quot;, 36: &quot;江西&quot;, 37: &quot;山东&quot;, 41: &quot;河南&quot;,<br>
					42: &quot;湖北&quot;, 43: &quot;湖南&quot;, 44: &quot;广东&quot;, 45: &quot;广西&quot;, 46: &quot;海南&quot;, 50: &quot;重庆&quot;,<br>
					51: &quot;四川&quot;, 52: &quot;贵州&quot;, 53: &quot;云南&quot;, 54: &quot;西藏&quot;, 61: &quot;陕西&quot;, 62: &quot;甘肃&quot;,<br>
					63: &quot;青海&quot;, 64: &quot;宁夏&quot;, 65: &quot;新疆&quot;, 71: &quot;台湾&quot;, 81: &quot;香港&quot;, 82: &quot;澳门&quot;, 91: &quot;国外&quot;<br>
					}; </p>
				<p>checktheform = function()<br>
					{<br>
					var card = document.getElementById('code').value;<br>
					var ts = document.getElementById(&quot;code&quot;);<br>
					//是否为空<br>
					if (card === '')<br>
					{<br>
					ts.style.border = &quot;solid 1px #ff0000&quot;;<br>
					document.getElementById('code').focus;<br>
					return false;<br>
					}<br>
					//校验长度，类型<br>
					if (isCardNo(card) === false)<br>
					{<br>
					ts.style.border = &quot;solid 1px #ff0000&quot;;<br>
					document.getElementById('code').focus;<br>
					return false;<br>
					}<br>
					//检查省份<br>
					if (checkProvince(card) === false)<br>
					{<br>
					ts.style.border = &quot;solid 1px #ff0000&quot;;<br>
					document.getElementById('code').focus;<br>
					return false;<br>
					}<br>
					//校验生日<br>
					if (checkBirthday(card) === false)<br>
					{<br>
					ts.style.border = &quot;solid 1px #ff0000&quot;;<br>
					document.getElementById('code').focus();<br>
					return false;<br>
					}<br>
					//检验位的检测<br>
					if (checkParity(card) === false)<br>
					{<br>
					ts.style.border = &quot;solid 1px #ff0000&quot;;<br>
					document.getElementById('code').focus();<br>
					return false;<br>
					}<br>
					ts.style.border = &quot;solid 1px #049b07&quot;;<br>
					return true;<br>
					}; <br>
				</p>
				<p>//检查号码是否符合规范，包括长度，类型<br>
					isCardNo = function(card)<br>
					{<br>
					//身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X<br>
					var reg = /(^\d{15}$)|(^\d{17}(\d|X)$)/;<br>
					if (reg.test(card) === false)<br>
					{<br>
					return false;<br>
					} </p>
				<p> return true;<br>
					}; </p>
				<p>//取身份证前两位,校验省份<br>
					checkProvince = function(card)<br>
					{<br>
					var province = card.substr(0, 2);<br>
					if (vcity[province] == undefined)<br>
					{<br>
					return false;<br>
					}<br>
					return true;<br>
					}; </p>
				<p>//检查生日是否正确<br>
					checkBirthday = function(card)<br>
					{<br>
					var len = card.length;<br>
					//身份证15位时，次序为省（3位）市（3位）年（2位）月（2位）日（2位）校验位（3位），皆为数字<br>
					if (len == '15')<br>
					{<br>
					var re_fifteen = /^(\d{6})(\d{2})(\d{2})(\d{2})(\d{3})$/;<br>
					var arr_data = card.match(re_fifteen);<br>
					var year = arr_data[2];<br>
					var month = arr_data[3];<br>
					var day = arr_data[4];<br>
					var birthday = new Date('19' + year + '/' + month + '/' + day);<br>
					return verifyBirthday('19' + year, month, day, birthday);<br>
					}<br>
					//身份证18位时，次序为省（3位）市（3位）年（4位）月（2位）日（2位）校验位（4位），校验位末尾可能为X<br>
					if (len == '18')<br>
					{<br>
					var re_eighteen = /^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$/;<br>
					var arr_data = card.match(re_eighteen);<br>
					var year = arr_data[2];<br>
					var month = arr_data[3];<br>
					var day = arr_data[4];<br>
					var birthday = new Date(year + '/' + month + '/' + day);<br>
					return verifyBirthday(year, month, day, birthday);<br>
					}<br>
					return false;<br>
					}; </p>
				<p>//校验日期<br>
					verifyBirthday = function(year, month, day, birthday)<br>
					{<br>
					var now = new Date();<br>
					var now_year = now.getFullYear();<br>
					//年月日是否合理<br>
					if (birthday.getFullYear() == year &amp;&amp; (birthday.getMonth() + 1) == month &amp;&amp; birthday.getDate() == day)<br>
					{<br>
					//判断年份的范围（3岁到100岁之间)<br>
					var time = now_year - year;<br>
					if (time &gt;= 3 &amp;&amp; time &lt;= 100)<br>
					{<br>
					return true;<br>
					}<br>
					return false;<br>
					}<br>
					return false;<br>
					}; </p>
				<p>//校验位的检测<br>
					checkParity = function(card)<br>
					{<br>
					//15位转18位<br>
					card = changeFivteenToEighteen(card);<br>
					var len = card.length;<br>
					if (len == '18')<br>
					{<br>
					var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);<br>
					var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');<br>
					var cardTemp = 0, i, valnum;<br>
					for (i = 0; i &lt; 17; i++)<br>
					{<br>
					cardTemp += card.substr(i, 1) * arrInt[i];<br>
					}<br>
					valnum = arrCh[cardTemp % 11];<br>
					if (valnum == card.substr(17, 1))<br>
					{<br>
					return true;<br>
					}<br>
					return false;<br>
					}<br>
					return false;<br>
					}; </p>
				<p>//15位转18位身份证号<br>
					changeFivteenToEighteen = function(card)<br>
					{<br>
					if (card.length == '15')<br>
					{<br>
					var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);<br>
					var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');<br>
					var cardTemp = 0, i;<br>
					card = card.substr(0, 6) + '19' + card.substr(6, card.length - 6);<br>
					for (i = 0; i &lt; 17; i++)<br>
					{<br>
					cardTemp += card.substr(i, 1) * arrInt[i];<br>
					}<br>
					card += arrCh[cardTemp % 11];<br>
					return card;<br>
					}<br>
					return card;<br>
					}; <br>
				</p>
			</dd>
		</dl>
		<dl>
			<dt>当前日期</dt>
			<dd>&lt;script language=&quot;javascript&quot;&gt;<br>
				today=new Date(); <br>
				var week; var date; <br>
				if(today.getDay()==0) week=&quot;星期日&quot; <br>
				if(today.getDay()==1) week=&quot;星期一&quot; <br>
				if(today.getDay()==2) week=&quot;星期二&quot; <br>
				if(today.getDay()==3) week=&quot;星期三&quot; <br>
				if(today.getDay()==4) week=&quot;星期四&quot; <br>
				if(today.getDay()==5) week=&quot;星期五&quot; <br>
				if(today.getDay()==6) week=&quot;星期六&quot; <br>
				date=(today.getYear())+&quot;年&quot;+(today.getMonth()+1)+&quot;月&quot;+today.getDate()+&quot;日&quot;+&quot; &quot; <br>
				document.write(&quot;&lt;span style='font-size: 9pt;'&gt;&quot;+date+week+&quot;&lt;/span&gt;&quot;); <br>
				&lt;/script&gt;</dd>
		</dl>
		<dl>
			<dt>倒计时转跳</dt>
			<dd>
				<p>&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt; <br>
					var second = document.getElementById('totalSecond').textContent; <br>
					setInterval(&quot;redirect()&quot;, 1000); <br>
					function redirect() <br>
					{ <br>
					document.getElementById('totalSecond').textContent = --second; <br>
					if (second &lt; 0) location.href = 'hello.html'; <br>
					} <br>
					&lt;/script&gt;</p>
				<p></p>
			</dd>
		</dl>
		<dl>
			<dt>加入收藏</dt>
			<dd> &lt;a href=&quot;javascript:window.external.AddFavorite('http://www.sin99.com','随风网站')&quot;&gt;加入收藏&lt;/a&gt; </dd>
		</dl>
		<dl>
			<dt>设为首页</dt>
			<dd> &lt;a onclick=&quot;this.style.behavior='url(#default#homepage)';this.setHomePage('http://www.sccvtc.net');&quot; href=&quot;#&quot;&gt;设为首页&lt;/a&gt; </dd>
		</dl>
		<dl>
			<dt>全屏</dt>
			<dd>&lt;form&gt; <br>
				&lt;div align=&quot;center&quot;&gt; <br>
				&lt;input type=&quot;BUTTON&quot; name=&quot;FullScreen&quot; value=&quot;全屏显示&quot; onClick=&quot;window.open(document.location, 'big', 'fullscreen=yes')&quot;&gt; <br>
				&lt;/div&gt; <br>
				&lt;/form&gt; </dd>
		</dl>
		<dl>
			<dt>正则表达式</dt>
			<dd>
				<p>匹配Email地址的正则表达式：w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*<br>
					评注：表单验证时很实用 </p>
				<p>匹配网址URL的正则表达式：[a-zA-z]+://[^s]*<br>
					评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p>
				<p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br>
					评注：表单验证时很实用</p>
				<p>匹配国内电话号码：d{3}-d{8}|d{4}-d{7}<br>
					评注：匹配形式如 0511-4405222 或 021-87888822</p>
				<p>匹配腾讯QQ号：[1-9][0-9]{4,}<br>
					评注：腾讯QQ号从10000开始</p>
				<p>匹配中国邮政编码：[1-9]d{5}(?!d)<br>
					评注：中国邮政编码为6位数字</p>
				<p>匹配身份证：d{15}|d{18}<br>
					评注：中国的身份证为15位或18位</p>
				<p>匹配ip地址：d+.d+.d+.d+<br>
					评注：提取ip地址时有用</p>
				<p>匹配特定数字：<br>
					^[1-9]d*$　 　 //匹配正整数<br>
					^-[1-9]d*$ 　 //匹配负整数<br>
					^-?[1-9]d*$　　 //匹配整数<br>
					^[1-9]d*|0$　 //匹配非负整数（正整数 + 0）<br>
					^-[1-9]d*|0$　　 //匹配非正整数（负整数 + 0）<br>
					^[1-9]d*.d*|0.d*[1-9]d*$　　 //匹配正浮点数<br>
					^-([1-9]d*.d*|0.d*[1-9]d*)$　 //匹配负浮点数<br>
					^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$　 //匹配浮点数<br>
					^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）<br>
					^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$　　//匹配非正浮点数（负浮点数 + 0）<br>
					评注：处理大量数据时有用，具体应用时注意修正</p>
				<p>匹配特定字符串：<br>
					^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串<br>
					^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串<br>
					^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串<br>
					^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串<br>
					^w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</p>
				<p>在使用RegularExpressionValidator验证控件时的验证功能及其验证表达式介绍如下:</p>
				<p>只能输入数字：&quot;^[0-9]*$&quot;<br>
					只能输入n位的数字：&quot;^d{n}$&quot;<br>
					只能输入至少n位数字：&quot;^d{n,}$&quot;<br>
					只能输入m-n位的数字：&quot;^d{m,n}$&quot;<br>
					只能输入零和非零开头的数字：&quot;^(0|[1-9][0-9]*)$&quot;<br>
					只能输入有两位小数的正实数：&quot;^[0-9]+(.[0-9]{2})?$&quot;<br>
					只能输入有1-3位小数的正实数：&quot;^[0-9]+(.[0-9]{1,3})?$&quot;<br>
					只能输入非零的正整数：&quot;^+?[1-9][0-9]*$&quot;<br>
					只能输入非零的负整数：&quot;^-[1-9][0-9]*$&quot;<br>
					只能输入长度为3的字符：&quot;^.{3}$&quot;<br>
					只能输入由26个英文字母组成的字符串：&quot;^[A-Za-z]+$&quot;<br>
					只能输入由26个大写英文字母组成的字符串：&quot;^[A-Z]+$&quot;<br>
					只能输入由26个小写英文字母组成的字符串：&quot;^[a-z]+$&quot;<br>
					只能输入由数字和26个英文字母组成的字符串：&quot;^[A-Za-z0-9]+$&quot;<br>
					只能输入由数字、26个英文字母或者下划线组成的字符串：&quot;^w+$&quot;<br>
					验证用户密码:&quot;^[a-zA-Z]w{5,17}$&quot;正确格式为：以字母开头，长度在6-18之间，</p>
				<p>只能包含字符、数字和下划线。<br>
					验证是否含有^%&amp;',;=?$&quot;等字符：&quot;[^%&amp;',;=?$x22]+&quot;<br>
					只能输入汉字：&quot;^[u4e00-u9fa5],{0,}$&quot;<br>
					验证Email地址：&quot;^w+[-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$&quot;<br>
					验证InternetURL：&quot;^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]*)?$&quot;<br>
					验证电话号码：&quot;^((d{3,4})|d{3,4}-)?d{7,8}$&quot;</p>
				<p>正确格式为：&quot;XXXX-XXXXXXX&quot;，&quot;XXXX-XXXXXXXX&quot;，&quot;XXX-XXXXXXX&quot;，</p>
				<p>&quot;XXX-XXXXXXXX&quot;，&quot;XXXXXXX&quot;，&quot;XXXXXXXX&quot;。<br>
					验证身份证号（15位或18位数字）：&quot;^d{15}|d{}18$&quot;<br>
					验证一年的12个月：&quot;^(0?[1-9]|1[0-2])$&quot;正确格式为：&quot;01&quot;-&quot;09&quot;和&quot;1&quot;&quot;12&quot;<br>
					验证一个月的31天：&quot;^((0?[1-9])|((1|2)[0-9])|30|31)$&quot;</p>
				<p>正确格式为：&quot;01&quot;&quot;09&quot;和&quot;1&quot;&quot;31&quot;。</p>
				<p>匹配中文字符的正则表达式： [u4e00-u9fa5]<br>
					匹配双字节字符(包括汉字在内)：[^x00-xff]<br>
					匹配空行的正则表达式：n[s| ]*r<br>
					匹配HTML标记的正则表达式：/&lt; (.*)&gt;.*|&lt; (.*) /&gt;/<br>
					匹配首尾空格的正则表达式：(^s*)|(s*$)<br>
					匹配Email地址的正则表达式：w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*<br>
					匹配网址URL的正则表达式：http://([w-]+.)+[w-]+(/[w- ./?%&amp;=]*)?</p>
				<p>(1)应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）<br>
					String.prototype.len=function(){return this.replace([^x00-xff]/g,&quot;aa&quot;).length;}</p>
				<p>(2)应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现<br>
					String.prototype.trim = function()<br>
					{<br>
					return this.replace(/(^s*)|(s*$)/g, &quot;&quot;);<br>
					}<br>
					(3)应用：利用正则表达式分解和转换IP地址<br>
					function IP2V(ip) //IP地址转换成对应数值<br>
					{<br>
					re=/(d+).(d+).(d+).(d+)/g //匹配IP地址的正则表达式<br>
					if(re.test(ip))<br>
					{<br>
					return RegExp.$1*Math.pow(255,3))+RegExp.$2*Math.pow(255,2))+RegExp.$3*255+RegExp.$4*1<br>
					}<br>
					else<br>
					{<br>
					throw new Error(&quot;Not a valid IP address!&quot;)<br>
					}<br>
					}<br>
					(4)应用：从URL地址中提取文件名的javascript程序<br>
					s=&quot;http://www.9499.net/page1.htm&quot;;<br>
					s=s.replace(/(.*/){0,}([^.]+).*/ig,&quot;$2″) ; //Page1.htm<br>
					(5)应用：利用正则表达式限制网页表单里的文本框输入内容<br>
					用正则表达式限制只能输入中文：onkeyup=&quot;value=&quot;/blog/value.replace(/[&quot;^u4E00-u9FA5]/g,&quot;) &quot; onbeforepaste=&quot;clipboardData.setData('text',clipboardData.getData('text').replace(/[^u4E00-u9FA5]/g,&quot;))&quot;<br>
					用正则表达式限制只能输入全角字符： onkeyup=&quot;value=&quot;/blog/value.replace(/[&quot;^uFF00-uFFFF]/g,&quot;) &quot; onbeforepaste=&quot;clipboardData.setData('text',clipboardData.getData('text').replace(/[^uFF00-uFFFF]/g,&quot;))&quot;<br>
					用正则表达式限制只能输入数字：onkeyup=&quot;value=&quot;/blog/value.replace(/[&quot;^d]/g,&quot;) &quot;onbeforepaste= &quot;clipboardData.setData('text',clipboardData.getData('text').replace(/[^d]/g,&quot;))&quot;<br>
					用正则表达式限制只能输入数字和英文：onkeyup=&quot;value=&quot;/blog/value.replace(/[W]/g,&quot;&quot;) &quot;onbeforepaste=&quot;clipboardData.setData('text',clipboardData.getData('text').replace(/[^d] </p>
				<p>&nbsp;</p>
				<p>============================================================================<br>
				</p>
				<p>&nbsp;</p>
				<p>正则表达式用于字符串处理、表单验证等场合，实用高效。现将一些常用的表达式收集于此，以备不时之需。</p>
				<p>用户名：/^[a-z0-9_-]{3,16}$/</p>
				<p>密码：/^[a-z0-9_-]{6,18}$/</p>
				<p>十六进制值：/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</p>
				<p>电子邮箱：/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/</p>
				<p>URL：/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/</p>
				<p>IP 地址：/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</p>
				<p>HTML 标签：/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$/</p>
				<p>Unicode编码中的汉字范围：/^[u4e00-u9fa5],{0,}$/</p>
				<p>匹配中文字符的正则表达式： [\u4e00-\u9fa5]<br>
					评注：匹配中文还真是个头疼的事，有了这个表达式就好办了</p>
				<p>匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br>
					评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p>
				<p>匹配空白行的正则表达式：\n\s*\r<br>
					评注：可以用来删除空白行</p>
				<p>匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;<br>
					评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p>
				<p>匹配首尾空白字符的正则表达式：^\s*|\s*$<br>
					评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p>
				<p>匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*<br>
					评注：表单验证时很实用</p>
				<p>匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*<br>
					评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p>
				<p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br>
					评注：表单验证时很实用</p>
				<p>匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}<br>
					评注：匹配形式如 0511-4405222 或 021-87888822</p>
				<p>匹配腾讯QQ号：[1-9][0-9]{4,}<br>
					评注：腾讯QQ号从10000开始</p>
				<p>匹配中国大陆邮政编码：[1-9]\d{5}(?!\d)<br>
					评注：中国大陆邮政编码为6位数字</p>
				<p>匹配身份证：\d{15}|\d{18}<br>
					评注：中国大陆的身份证为15位或18位</p>
				<p>匹配ip地址：\d+\.\d+\.\d+\.\d+<br>
					评注：提取ip地址时有用</p>
				<p>匹配特定数字：<br>
					^[1-9]\d*$　 　 //匹配正整数<br>
					^-[1-9]\d*$ 　 //匹配负整数<br>
					^-?[1-9]\d*$　　 //匹配整数<br>
					^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）<br>
					^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0）<br>
					^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　 //匹配正浮点数<br>
					^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　 //匹配负浮点数<br>
					^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　 //匹配浮点数<br>
					^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）<br>
					^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 + 0）<br>
					评注：处理大量数据时有用，具体应用时注意修正</p>
				<p>匹配特定字符串：<br>
					^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串<br>
					^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串<br>
					^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串<br>
					^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串<br>
					^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</p>
				<p>表达式全集<br>
					正则表达式有多种不同的风格。下表是在PCRE中元字符及其在正则表达式上下文中的行为的一个完整列表：</p>
				<p>字符 描述 <br>
					\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，&quot;n&quot;匹配字符&quot;n&quot;。&quot;\n&quot;匹配一个换行符。序列&quot;\\&quot;匹配&quot;\&quot;而&quot;\(&quot;则匹配&quot;(&quot;。 <br>
					^ 匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配&quot;\n&quot;或&quot;\r&quot;之后的位置。 <br>
					$ 匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配&quot;\n&quot;或&quot;\r&quot;之前的位置。 <br>
					* 匹配前面的子表达式零次或多次。例如，zo*能匹配&quot;z&quot;以及&quot;zoo&quot;。*等价于{0,}。 <br>
					+ 匹配前面的子表达式一次或多次。例如，&quot;zo+&quot;能匹配&quot;zo&quot;以及&quot;zoo&quot;，但不能匹配&quot;z&quot;。+等价于{1,}。 <br>
					? 匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot;可以匹配&quot;do&quot;或&quot;does&quot;中的&quot;do&quot;。?等价于{0,1}。 <br>
					{n} n是一个非负整数。匹配确定的n次。例如，&quot;o{2}&quot;不能匹配&quot;Bob&quot;中的&quot;o&quot;，但是能匹配&quot;food&quot;中的两个o。 <br>
					{n,} n是一个非负整数。至少匹配n次。例如，&quot;o{2,}&quot;不能匹配&quot;Bob&quot;中的&quot;o&quot;，但能匹配&quot;foooood&quot;中的所有o。&quot;o{1,}&quot;等价于&quot;o+&quot;。&quot;o{0,}&quot;则等价于&quot;o*&quot;。 <br>
					{n,m} m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，&quot;o{1,3}&quot;将匹配&quot;fooooood&quot;中的前三个o。&quot;o{0,1}&quot;等价于&quot;o?&quot;。请注意在逗号和两个数之间不能有空格。 <br>
					? 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串&quot;oooo&quot;，&quot;o+?&quot;将匹配单个&quot;o&quot;，而&quot;o+&quot;将匹配所有&quot;o&quot;。 <br>
					. 匹配除&quot;\n&quot;之外的任何单个字符。要匹配包括&quot;\n&quot;在内的任何字符，请使用像&quot;[.\n]&quot;的模式。 <br>
					(pattern) 匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用&quot;\(&quot;或&quot;\)&quot;。 <br>
					(?:pattern) 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符&quot;(|)&quot;来组合一个模式的各个部分是很有用。例如&quot;industr(?:y|ies)&quot;就是一个比&quot;industry|industries&quot;更简略的表达式。 <br>
					(?=pattern) 正向预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，&quot;Windows(?=95|98|NT|2000)&quot;能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;，但不能匹配&quot;Windows3.1&quot;中的&quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 <br>
					(?!pattern) 负向预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如&quot;Windows(?!95|98|NT|2000)&quot;能匹配&quot;Windows3.1&quot;中的&quot;Windows&quot;，但不能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始 <br>
					x|y 匹配x或y。例如，&quot;z|food&quot;能匹配&quot;z&quot;或&quot;food&quot;。&quot;(z|f)ood&quot;则匹配&quot;zood&quot;或&quot;food&quot;。 <br>
					[xyz] 字符集合。匹配所包含的任意一个字符。例如，&quot;[abc]&quot;可以匹配&quot;plain&quot;中的&quot;a&quot;。 <br>
					[^xyz] 负值字符集合。匹配未包含的任意字符。例如，&quot;[^abc]&quot;可以匹配&quot;plain&quot;中的&quot;p&quot;。 <br>
					[a-z] 字符范围。匹配指定范围内的任意字符。例如，&quot;[a-z]&quot;可以匹配&quot;a&quot;到&quot;z&quot;范围内的任意小写字母字符。 <br>
					[^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，&quot;[^a-z]&quot;可以匹配任何不在&quot;a&quot;到&quot;z&quot;范围内的任意字符。 <br>
					\b 匹配一个单词边界，也就是指单词和空格间的位置。例如，&quot;er\b&quot;可以匹配&quot;never&quot;中的&quot;er&quot;，但不能匹配&quot;verb&quot;中的&quot;er&quot;。 <br>
					\B 匹配非单词边界。&quot;er\B&quot;能匹配&quot;verb&quot;中的&quot;er&quot;，但不能匹配&quot;never&quot;中的&quot;er&quot;。 <br>
					\cx 匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的&quot;c&quot;字符。 <br>
					\d 匹配一个数字字符。等价于[0-9]。 <br>
					\D 匹配一个非数字字符。等价于[^0-9]。 <br>
					\f 匹配一个换页符。等价于\x0c和\cL。 <br>
					\n 匹配一个换行符。等价于\x0a和\cJ。 <br>
					\r 匹配一个回车符。等价于\x0d和\cM。 <br>
					\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[\f\n\r\t\v]。 <br>
					\S 匹配任何非空白字符。等价于[^\f\n\r\t\v]。 <br>
					\t 匹配一个制表符。等价于\x09和\cI。 <br>
					\v 匹配一个垂直制表符。等价于\x0b和\cK。 <br>
					\w 匹配包括下划线的任何单词字符。等价于&quot;[A-Za-z0-9_]&quot;。 <br>
					\W 匹配任何非单词字符。等价于&quot;[^A-Za-z0-9_]&quot;。 <br>
					\xn 匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，&quot;\x41&quot;匹配&quot;A&quot;。&quot;\x041&quot;则等价于&quot;\x04&amp;1&quot;。正则表达式中可以使用ASCII编码。. <br>
					\num 匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，&quot;(.)\1&quot;匹配两个连续的相同字符。 <br>
					\n 标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。 <br>
					\nm 标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。 <br>
					\nml 如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。 <br>
					\un 匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（?）。 <br>
				</p>
				<p>---------------------------------------------------------------------------------------------<br>
				</p>
				<p>验证数字的正则表达式集 <br>
					验证数字：^[0-9]*$ <br>
					验证n位的数字：^\d{n}$ <br>
					验证至少n位数字：^\d{n,}$ <br>
					验证m-n位的数字：^\d{m,n}$ <br>
					验证零和非零开头的数字：^(0|[1-9][0-9]*)$ <br>
					验证有两位小数的正实数：^[0-9]+(.[0-9]{2})?$ <br>
					验证有1-3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$ <br>
					验证非零的正整数：^\+?[1-9][0-9]*$ <br>
					验证非零的负整数：^\-[1-9][0-9]*$ <br>
					验证非负整数（正整数 + 0） ^\d+$ <br>
					验证非正整数（负整数 + 0） ^((-\d+)|(0+))$ <br>
					验证长度为3的字符：^.{3}$ <br>
					验证由26个英文字母组成的字符串：^[A-Za-z]+$ <br>
					验证由26个大写英文字母组成的字符串：^[A-Z]+$ <br>
					验证由26个小写英文字母组成的字符串：^[a-z]+$ <br>
					验证由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ <br>
					验证由数字、26个英文字母或者下划线组成的字符串：^\w+$ <br>
					验证用户密码:^[a-zA-Z]\w{5,17}$ 正确格式为：以字母开头，长度在6-18之间，只能包含字符、数字和下划线。 <br>
					验证是否含有 ^%&amp;',;=?$\&quot; 等字符：[^%&amp;',;=?$\x22]+ <br>
					验证汉字：^[\u4e00-\u9fa5],{0,}$ <br>
					验证Email地址：^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$ <br>
					验证InternetURL：^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$ ；^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$ <br>
					验证电话号码：^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$：--正确格式为：XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX。 <br>
					验证身份证号（15位或18位数字）：^\d{15}|\d{}18$ <br>
					验证一年的12个月：^(0?[1-9]|1[0-2])$ 正确格式为：&quot;01&quot;-&quot;09&quot;和&quot;1&quot;&quot;12&quot; <br>
					验证一个月的31天：^((0?[1-9])|((1|2)[0-9])|30|31)$ 正确格式为：01、09和1、31。 <br>
					整数：^-?\d+$ <br>
					非负浮点数（正浮点数 + 0）：^\d+(\.\d+)?$ <br>
					正浮点数 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$ <br>
					非正浮点数（负浮点数 + 0） ^((-\d+(\.\d+)?)|(0+(\.0+)?))$ <br>
					负浮点数 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$ <br>
					浮点数 ^(-?\d+)(\.\d+)?$ <br>
					<br>
					正则表达式中的特殊字符 <br>
					字符  含意 <br>
					\  做为转意，即通常在&quot;\&quot;后面的字符不按原来意义解释，如/b/匹配字符&quot;b&quot;，当b前面加了反斜杆后/\b/，转意为匹配一个单词的边界。 <br>
					<br>
					^  匹配一个输入或一行的开头，/^a/匹配&quot;an A&quot;，而不匹配&quot;An a&quot; <br>
					$  匹配一个输入或一行的结尾，/a$/匹配&quot;An a&quot;，而不匹配&quot;an A&quot; <br>
					*  匹配前面元字符0次或多次，/ba*/将匹配b,ba,baa,baaa <br>
					+  匹配前面元字符1次或多次，/ba*/将匹配ba,baa,baaa <br>
					?  匹配前面元字符0次或1次，/ba*/将匹配b,ba <br>
					(x)  匹配x保存x在名为$1...$9的变量中 <br>
					x|y  匹配x或y <br>
					{n}  精确匹配n次 <br>
					{n,}  匹配n次以上 <br>
					{n,m}  匹配n-m次 <br>
					[xyz]  字符集(character set)，匹配这个集合中的任一一个字符(或元字符) <br>
					[^xyz]  不匹配这个集合中的任何一个字符 <br>
					[\b]  匹配一个退格符 <br>
					\b  匹配一个单词的边界 <br>
					\B  匹配一个单词的非边界 <br>
					\cX  这儿，X是一个控制符，/\cM/匹配Ctrl-M <br>
					\d  匹配一个字数字符，/\d/ = /[0-9]/ <br>
					\D  匹配一个非字数字符，/\D/ = /[^0-9]/ <br>
					\n  匹配一个换行符 <br>
					\r  匹配一个回车符 <br>
					\s  匹配一个空白字符，包括\n,\r,\f,\t,\v等 <br>
					\S  匹配一个非空白字符，等于/[^\n\f\r\t\v]/ <br>
					\t  匹配一个制表符 <br>
					\v  匹配一个重直制表符 <br>
					\w  匹配一个可以组成单词的字符(alphanumeric，这是我的意译，含数字)，包括下划线，如[\w]匹配&quot;$5.98&quot;中的5，等于[a-zA-Z0-9] <br>
					\W  匹配一个不可以组成单词的字符，如[\W]匹配&quot;$5.98&quot;中的$，等于[^a-zA-Z0-9]。 <br>
					<br>
					用re = new RegExp(&quot;pattern&quot;,[&quot;flags&quot;]) 的方式比较好 <br>
					pattern : 正则表达式 <br>
					flags: g （全文查找出现的所有 pattern） <br>
					i （忽略大小写） <br>
					m （多行查找） <br>
					vaScript动态正则表达式问题 <br>
					请问正则表达式可以动态生成吗? <br>
					例如JavaScript中: <br>
					var str = &quot;strTemp&quot;; <br>
					要生成: <br>
					var re = /strTemp/; <br>
					如果是字符连接: <br>
					var re = &quot;/&quot; + str + &quot;/&quot;即可 <br>
					但是要生成表达式,可以实现吗?怎样实现? <br>
					<br>
					<br>
					<br>
					[JAVA] javascript 正则表达式 <br>
					秋雨叶 发表于 2004-12-9 14:54:13 <br>
					正则表达式是一个描述字符模式的对象。 <br>
					JavaScript的RegExp对象和String对象定义了使用正则表达式来执行强大的模式匹配和文本检索与替换函数的方法. </p>
				<p>在JavaScript中,正则表达式是由一个RegExp对象表示的.当然,可以使用一个RegExp()构造函数来创建RegExp对象, <br>
					也可以用JavaScript 1.2中的新添加的一个特殊语法来创建RegExp对象.就像字符串直接量被定义为包含在引号内的字符一样, <br>
					正则表达式直接量也被定义为包含在一对斜杠(/)之间的字符.所以,JavaScript可能会包含如下的代码: </p>
				<p>var pattern = /s$/; </p>
				<p>这行代码创建一个新的RegExp对象,并将它赋给变量parttern.这个特殊的RegExp对象和所有以字母&quot;s&quot;结尾的字符串都匹配.用RegExp()也可以定义 <br>
					一个等价的正则表达式,代码如下: </p>
				<p>var pattern = new RegExp(&quot;s$&quot;); </p>
				<p>无论是用正则表达式直接量还是用构造函数RegExp(),创建一个RegExp对象都是比较容易的.较为困难的任务是用正则表达式语法来描述字符的模式. <br>
					JavaScript采用的是Perl语言正则表达式语法的一个相当完整的子集. </p>
				<p>正则表达式的模式规范是由一系列字符构成的.大多数字符(包括所有字母数字字符)描述的都是按照字面意思进行匹配的字符.这样说来,正则表达式/java/就和 <br>
					所有包含子串 &quot;java&quot; 的字符串相匹配.虽然正则表达式中的其它字符不是按照字面意思进行匹配的,但它们都具有特殊的意义.正则表达式 /s$/ 包含两个字符. <br>
					第一个特殊字符 &quot;s&quot; 是按照字面意思与自身相匹配.第二个字符 &quot;$&quot; 是一个特殊字符,它所匹配的是字符串的结尾.所以正则表达式 /s$/ 匹配的就是以字母 &quot;s&quot; 结尾 <br>
					的字符串. <br>
				</p>
				<p>1.直接量字符 </p>
				<p>我们已经发现了,在正则表达式中所有的字母字符和数字都是按照字面意思与自身相匹配的.JavaScript的正则表达式还通过以反斜杠(\)开头的转义序列支持某些非 </p>
				<p>字母字符.例如,序列 &quot;\n&quot; 在字符串中匹配的是一个直接量换行符.在正则表达式中,许多标点符号都有特殊的含义.下面是这些字符和它们的含义: </p>
				<p>正则表达式的直接量字符 </p>
				<p>字符 匹配 <br>
					________________________________ <br>
					字母数字字符 自身 <br>
					\ f 换页符 <br>
					\ n 换行符 <br>
					\ r 回车 <br>
					\ t 制表符 <br>
					\ v 垂直制表符 <br>
					\ / 一个 / 直接量 <br>
					\ \ 一个 \ 直接量 <br>
					\ . 一个 . 直接量 <br>
					\ * 一个 * 直接量 <br>
					\ + 一个 + 直接量 <br>
					\ ? 一个 ? 直接量 <br>
					\ | 一个 | 直接量 <br>
					\ ( 一个 ( 直接量 <br>
					\ ) 一个 ) 直接量 <br>
					\ [ 一个 [ 直接量 <br>
					\ ] 一个 ] 直接量 <br>
					\ { 一个 { 直接量 <br>
					\ } 一个 } 直接量 <br>
					\ XXX 由十进制数 XXX 指 定的ASCII码字符 <br>
					\ Xnn 由十六进制数 nn 指定的ASCII码字符 <br>
					\ cX 控制字符^X. 例如, \cI等价于 \t, \cJ等价于 \n </p>
				<p>___________________________________________________ </p>
				<p>如果想在正则表达式中使用特殊的标点符号,必须在它们之前加上一个 &quot;\&quot; . &lt;BR&gt;&lt;BR&gt;<br>
					参见rightContext <br>
					constructor　　　  创建一个对象的一个特殊的函数原型 <br>
					global　　　　　　  是否在整个串中匹配(bool型) <br>
					ignoreCase　　　　  匹配时是否忽略大小写(bool型) <br>
					input　　　　　　　  被匹配的串 <br>
					lastIndex　　　　  最后一次匹配的索引 <br>
					lastParen　　　　  最后一个括号括起来的子串 <br>
					leftContext　　　  最近一次匹配以左的子串 <br>
					multiline　　　　  是否进行多行匹配(bool型) <br>
					prototype　　　　  允许附加属性给对象 <br>
					rightContext　　　  最近一次匹配以右的子串 <br>
					source　　　　　　  正则表达式模式 <br>
					lastIndex　　　　  最后一次匹配的索引 <br>
				</p>
				<p>正则表达式对象的方法 <br>
					方法  含义 <br>
					compile　　　　　  正则表达式比较 <br>
					exec　　　　　　　  执行查找 <br>
					test　　　　　　　  进行匹配 <br>
					toSource　　　　　  返回特定对象的定义(literal representing)，其值可用来创建一个新的对象。重载Object.toSource方法得到的。 <br>
					toString　　　　　  返回特定对象的串。重载Object.toString方法得到的。 <br>
					valueOf　　　　　  返回特定对象的原始值。重载Object.valueOf方法得到 <br>
					<br>
					例子 <br>
					&lt;script language = &quot;JavaScript&quot;&gt; <br>
					var myReg = /(w+)s(w+)/; <br>
					var str = &quot;John Smith&quot;; <br>
					var newstr = str.replace(myReg, &quot;$2, $1&quot;); <br>
					document.write(newstr); <br>
					&lt;/script&gt; <br>
					将输出&quot;Smith, John&quot; <br>
					<br>
				</p>
				<p> </p>
				<p> </p>
				<p>javascript正则表达式检验 </p>
				<p>&nbsp;</p>
				<p>/********************************************************************************* <br>
					* EO_JSLib.js <br>
					* javascript正则表达式检验 <br>
					**********************************************************************************/ </p>
				<p>//校验是否全由数字组成 <br>
					function isDigit(s) <br>
					{ <br>
					var patrn=/^[0-9]{1,20}$/; <br>
					if (!patrn.exec(s)) return false <br>
					return true <br>
					} </p>
				<p>//校验登录名：只能输入5-20个以字母开头、可带数字、&quot;_&quot;、&quot;.&quot;的字串 <br>
					function isRegisterUserName(s) <br>
					{ <br>
					var patrn=/^[a-zA-Z]{1}([a-zA-Z0-9]|[._]){4,19}$/; <br>
					if (!patrn.exec(s)) return false <br>
					return true <br>
					} </p>
				<p>//校验用户姓名：只能输入1-30个以字母开头的字串 <br>
					function isTrueName(s) <br>
					{ <br>
					var patrn=/^[a-zA-Z]{1,30}$/; <br>
					if (!patrn.exec(s)) return false <br>
					return true <br>
					} </p>
				<p>//校验密码：只能输入6-20个字母、数字、下划线 <br>
					function isPasswd(s) <br>
					{ <br>
					var patrn=/^(\w){6,20}$/; <br>
					if (!patrn.exec(s)) return false <br>
					return true <br>
					} </p>
				<p>//校验普通电话、传真号码：可以&quot;+&quot;开头，除数字外，可含有&quot;-&quot; <br>
					function isTel(s) <br>
					{ <br>
					//var patrn=/^[+]{0,1}(\d){1,3}[ ]?([-]?(\d){1,12})+$/; <br>
					var patrn=/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/; <br>
					if (!patrn.exec(s)) return false <br>
					return true <br>
					} </p>
				<p>//校验手机号码：必须以数字开头，除数字外，可含有&quot;-&quot; <br>
					function isMobil(s) <br>
					{ <br>
					var patrn=/^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/; <br>
					if (!patrn.exec(s)) return false <br>
					return true <br>
					} </p>
				<p>//校验邮政编码 <br>
					function isPostalCode(s) <br>
					{ <br>
					//var patrn=/^[a-zA-Z0-9]{3,12}$/; <br>
					var patrn=/^[a-zA-Z0-9 ]{3,12}$/; <br>
					if (!patrn.exec(s)) return false <br>
					return true <br>
					} </p>
				<p>//校验搜索关键字 <br>
					function isSearch(s) <br>
					{ <br>
					var patrn=/^[^`~!@#$%^&amp;*()+=|\\\][\]\{\}:;'\,.&lt;&gt;/?]{1}[^`~!@$%^&amp;()+=|\\\][\]\{\}:;'\,.&lt;&gt;?]{0,19}$/; <br>
					if (!patrn.exec(s)) return false <br>
					return true <br>
					} </p>
				<p>function isIP(s) //by zergling <br>
					{ <br>
					var patrn=/^[0-9.]{1,20}$/; <br>
					if (!patrn.exec(s)) return false <br>
					return true <br>
					} </p>
				<p> </p>
				<p> </p>
				<p>正则表达式regular expression详述(一) <br>
					正则表达式是regular expression，看来英文比中文要好理解多了，就是检查表达式符 <br>
					不符合规定！！正则表达式有一个功能十分强大而又十分复杂的对象RegExp，在JavaScript1.2 版本以 <br>
					上提供。 <br>
					下面我们看看有关正则表达式的介绍： <br>
					正则表达式对象用来规范一个规范的表达式(也就是表达式符不符合特定的要求，比如是不是Email <br>
					地址格式等)，它具有用来检查给出的字符串是否符合规则的属性和方法。 <br>
					除此之外，你用RegExp构造器建立的个别正则表达式对象的属性，就已经预先定义好了正则表达式 <br>
					对象的静态属性，你可以随时使用它们。 <br>
					核心对象： <br>
					在JavaScript 1.2, NES 3.0以上版本提供。 <br>
					在JavaScript 1.3以后版本增加了toSource方法。 <br>
					建立方法： <br>
					文字格式或RegExp构造器函数。 <br>
					文字建立格式使用以下格式： <br>
					/pattern/flags即/模式/标记 </p>
				<p>构造器函数方法使用方法如下： <br>
					new RegExp(&quot;pattern&quot;[, &quot;flags&quot;])即new RegExp(&quot;模式&quot;[,&quot;标记&quot;]) </p>
				<p>参数： <br>
					pattern(模式) <br>
					表示正则表达式的文本 </p>
				<p>flags(标记) <br>
					如果指定此项，flags可以是下面值之一： <br>
					g: global match(全定匹配) <br>
					i: ignore case(忽略大小写) <br>
					gi: both global match and ignore case(匹配所有可能的值，也忽略大小写) </p>
				<p>注意：文本格式中的参数不要使用引号标记，而构造器函数的参数则要使用引号标记。所以下面的 <br>
					表达式建立同样的正则表达式： <br>
					/ab+c/i <br>
					new RegExp(&quot;ab+c&quot;, &quot;i&quot;) </p>
				<p>描述： <br>
					当使用构造函数的时候，必须使用正常的字符串避开规则(在字符串中加入前导字符\ )是必须的。 <br>
					例如，下面的两条语句是等价的： <br>
					re = new RegExp(&quot;\\w+&quot;) <br>
					re = /\w+/ </p>
				<p>下面的提供了在正则表达式中能够使用的完整对特殊字符的一个完整的列表和描述。 </p>
				<p>表1.3：正则表达式中的特殊字符： </p>
				<p>字符\ <br>
					意义：对于字符，通常表示按字面意义，指出接着的字符为特殊字符，\不作解释。 <br>
					例如：/b/匹配字符'b',通过在b 前面加一个反斜杠\，也就是/\b/，则该字符变成特殊字符，表示 <br>
					匹配一个单词的分界线。 <br>
					或者： <br>
					对于几个字符，通常说明是特殊的，指出紧接着的字符不是特殊的，而应该按字面解释。 <br>
					例如：*是一个特殊字符，匹配任意个字符(包括0个字符)；例如：/a*/意味匹配0个或多个a。 <br>
					为了匹配字面上的*，在a前面加一个反斜杠；例如：/a\*/匹配'a*'。 </p>
				<p>字符^ <br>
					意义：表示匹配的字符必须在最前边。 <br>
					例如：/^A/不匹配&quot;an A,&quot;中的'A'，但匹配&quot;An A.&quot;中最前面的'A'。 </p>
				<p>字符$ <br>
					意义：与^类似，匹配最末的字符。 <br>
					例如：/t$/不匹配&quot;eater&quot;中的't'，但匹配&quot;eat&quot;中的't'。 </p>
				<p>字符* <br>
					意义：匹配*前面的字符0次或n次。 <br>
					例如:/bo*/匹配&quot;A ghost booooed&quot;中的'boooo'或&quot;A bird warbled&quot;中的'b'，但不匹配&quot;A goat g </p>
				<p>字符+ <br>
					意义：匹配+号前面的字符1次或n次。等价于{1,}。 <br>
					例如：/a+/匹配&quot;candy&quot;中的'a'和&quot;caaaaaaandy.&quot;中的所有'a'。 </p>
				<p>字符? <br>
					意义：匹配?前面的字符0次或1次。 <br>
					例如：/e?le?/匹配&quot;angel&quot;中的'el'和&quot;angle.&quot;中的'le'。 </p>
				<p>字符. <br>
					意义：(小数点)匹配除换行符外的所有单个的字符。 <br>
					例如：/.n/匹配&quot;nay, an apple is on the tree&quot;中的'an'和'on'，但不匹配'nay'。 <br>
				</p>
				<p>字符(x) <br>
					意义：匹配'x'并记录匹配的值。 <br>
					例如：/(foo)/匹配和记录&quot;foo bar.&quot;中的'foo'。匹配子串能被结果数组中的素[1], ..., [n] 返 <br>
					回，或被RegExp对象的属性$1, ..., $9返回。 </p>
				<p>字符x|y <br>
					意义：匹配'x'或者'y'。 <br>
					例如：/green|red/匹配&quot;green apple&quot;中的'green'和&quot;red apple.&quot;中的'red'。 </p>
				<p>字符{n} <br>
					意义：这里的n是一个正整数。匹配前面的n个字符。 <br>
					例如：/a{2}/不匹配&quot;candy,&quot;中的'a'，但匹配&quot;caandy,&quot; 中的所有'a'和&quot;caaandy.&quot;中前面的两个 <br>
					'a'。 </p>
				<p>字符{n,} <br>
					意义：这里的n是一个正整数。匹配至少n个前面的字符。 <br>
					例如：/a{2,}不匹配&quot;candy&quot;中的'a'，但匹配&quot;caandy&quot;中的所有'a'和&quot;caaaaaaandy.&quot;中的所有'a' </p>
				<p>字符{n,m} <br>
					意义：这里的n和m都是正整数。匹配至少n个最多m个前面的字符。 <br>
					例如：/a{1,3}/不匹配&quot;cndy&quot;中的任何字符，但匹配 &quot;candy,&quot;中的'a'，&quot;caandy,&quot; 中的前面两个 <br>
					'a'和&quot;caaaaaaandy&quot;中前面的三个'a'，注意：即使&quot;caaaaaaandy&quot; 中有很多个'a'，但只匹配前面的三 <br>
					个'a'即&quot;aaa&quot;。 </p>
				<p>字符[xyz] <br>
					意义：一字符列表，匹配列出中的任一字符。你可以通过连字符-指出一个字符范围。 <br>
					例如：[abcd]跟[a-c]一样。它们匹配&quot;brisket&quot;中的'b'和&quot;ache&quot;中的'c'。 </p>
				<p>字符[^xyz] <br>
					意义：一字符补集，也就是说，它匹配除了列出的字符外的所有东西。 你可以使用连字符-指出一 <br>
					字符范围。 <br>
					例如：[^abc]和[^a-c]等价，它们最早匹配&quot;brisket&quot;中的'r'和&quot;chop.&quot;中的'h'。 </p>
				<p>字符[\b] <br>
					意义：匹配一个空格(不要与\b混淆) </p>
				<p>字符\b <br>
					意义：匹配一个单词的分界线，比如一个空格(不要与[\b]混淆) <br>
					例如：/\bn\w/匹配&quot;noonday&quot;中的'no'，/\wy\b/匹配&quot;possibly yesterday.&quot;中的'ly'。 </p>
				<p>字符\B <br>
					意义：匹配一个单词的非分界线 <br>
					例如：/\w\Bn/匹配&quot;noonday&quot;中的'on'，/y\B\w/匹配&quot;possibly yesterday.&quot;中的'ye'。 </p>
				<p>字符\cX <br>
					意义：这里的X是一个控制字符。匹配一个字符串的控制字符。 <br>
					例如：/\cM/匹配一个字符串中的control-M。 </p>
				<p>字符\d <br>
					意义：匹配一个数字，等价于[0-9]。 <br>
					例如：/\d/或/[0-9]/匹配&quot;B2 is the suite number.&quot;中的'2'。 </p>
				<p>字符\D <br>
					意义：匹配任何的非数字，等价于[^0-9]。 <br>
					例如：/\D/或/[^0-9]/匹配&quot;B2 is the suite number.&quot;中的'B'。 </p>
				<p>字符\f <br>
					意义：匹配一个表单符 </p>
				<p>字符\n <br>
					意义：匹配一个换行符 </p>
				<p>字符\r <br>
					意义：匹配一个回车符 </p>
				<p>字符\s <br>
					意义：匹配一个单个white空格符，包括空格，tab，form feed，换行符，等价于[ \f\n\r\t\v]。 <br>
					例如：/\s\w*/匹配&quot;foo bar.&quot;中的' bar'。 </p>
				<p>字符\S <br>
					意义：匹配除white空格符以外的一个单个的字符，等价于[^ \f\n\r\t\v]。 <br>
					例如：/\S/\w*匹配&quot;foo bar.&quot;中的'foo'。 </p>
				<p>字符\t <br>
					意义：匹配一个制表符 </p>
				<p>字符\v <br>
					意义：匹配一个顶头制表符 </p>
				<p>字符\w <br>
					意义：匹配所有的数字和字母以及下划线，等价于[A-Za-z0-9_]。 <br>
					例如：/\w/匹配&quot;apple,&quot;中的'a'，&quot;$5.28,&quot;中的'5'和&quot;3D.&quot;中的'3'。 </p>
				<p>字符\W <br>
					意义：匹配除数字、字母外及下划线外的其它字符，等价于[^A-Za-z0-9_]。 <br>
					例如：/\W/或者/[^$A-Za-z0-9_]/匹配&quot;50%.&quot;中的'%'。 </p>
				<p>字符\n <br>
					意义：这里的n是一个正整数。匹配一个正则表达式的最后一个子串的n的值(计数左圆括号)。 </p>
				<p>例如：/apple(,)\sorange\1/匹配&quot;apple, orange, cherry, peach.&quot;中的'apple, orange'，下面 <br>
					有一个更加完整的例子。 <br>
					注意：如果左圆括号中的数字比\n指定的数字还小，则\n取下一行的八进制escape作为描述。 </p>
				<p>字符\ooctal和\xhex <br>
					意义：这里的\ooctal是一个八进制的escape值，而\xhex是一个十六进制的escape值，允许在一个 <br>
					正则表达式中嵌入ASCII码。 <br>
				</p>
				<p>当表达式被检查的时候，文字符号提供了编辑正则表达式的方法。利用文字符号可以使到正则表达 <br>
					式保持为常数。例如，如果你在一个循环中使用文字符号来构造一个正则表达式，正则表达式不需进行 <br>
					反复编译。 <br>
					正则表达式对象构造器，例如，new RegExp(&quot;ab+c&quot;)，提供正则表达式的运行时编译。当你知道正 <br>
					则表达式的模式会变化的时候，应该使用构造函数，或者你不知道正则表达式的模式，而它们是从另外 <br>
					的源获得的时候，比如由用户输入时。一旦你定义好了正则表达式，该正则表达式可在任何地方使用， <br>
					并且可以改变，你可以使用编译方法来编译一个新的正则表达式以便重新使用。 <br>
					一个分离预先定义的RegExp对象可以在每个窗口中使用；也就是说，每个分离的JavaScript线程运 <br>
					行以获得自己的RegExp对象。因为每个脚本在一个线程中是不可中断的，这就确保了不同的脚本不会覆 <br>
					盖RegExp对象的值。 <br>
					预定义的RegExp对象包含的静态属性：input, multiline, lastMatch,lastParen, leftContext, <br>
					rightContext, 以及从$1到$9。input和multiline属性能被预设。其它静态属性的值是在执行个别正则 <br>
					表达式对象的exec和test方法后，且在执行字符串的match和replace方法后设置的。 </p>
				<p>属性 <br>
					注意RegExp对象的几个属性既有长名字又有短名字(象Perl)。这些名字都是指向相同的值。Perl是 <br>
					一种编程语言，而JavaScript模仿了它的正则表达式。 </p>
				<p>属性$1, ..., $9 <br>
					取得匹配的子串，如果有的话 </p>
				<p>属性$_ <br>
					参考input </p>
				<p>属性$* <br>
					参考multiline </p>
				<p>属性$&amp; <br>
					参考lastMatch </p>
				<p>属性$+ <br>
					参考lastParen </p>
				<p>属性$` <br>
					参考leftContext </p>
				<p>属性$' <br>
					参考rightContext </p>
				<p>属性constructor <br>
					指定用来建立对象原型函 </p>
				<p>属性global <br>
					决定是否测试正则表达式是否不能匹配所有的字符串，或者只是与最先的冲突。 </p>
				<p>属性ignoreCase <br>
					决定试图匹配字符串的时候是否忽略大小写 </p>
				<p>属性input <br>
					当正则表达式被匹配的时候，为相反的字符串。 </p>
				<p>属性lastIndex <br>
					决定下一次匹配从那里开始 </p>
				<p>属性lastMatch <br>
					最后一个匹配的字符 </p>
				<p>属性lastParen <br>
					子串匹配的时候，最后一个parenthesized，如果有的话。 </p>
				<p>属性leftContext <br>
					最近一次匹配前的子串。 </p>
				<p>属性multiline <br>
					是否在串的多行中搜索。 </p>
				<p>属性prototype <br>
					允许附加属性到所有的对象 </p>
				<p>属性rightContext <br>
					最近一次匹配后的的子串。 </p>
				<p>属性source <br>
					模式文本 </p>
				<p>&nbsp;</p>
				<p>&nbsp;</p>
				<p>方法 <br>
					compile方法 <br>
					编译一个正则表达式对象 </p>
				<p>exec方法 <br>
					运行正则表达式匹配 </p>
				<p>test方法 <br>
					测试正则达式匹配 </p>
				<p>toSource方法 <br>
					返回一个对象的文字描述指定的对象；你可以使用这个值来建立一个新的对象。不考虑Object.toS <br>
					ource方法。 </p>
				<p>toString方法 <br>
					返回一个字符串描述指定的对象，不考虑Object.toString对象。 </p>
				<p>valueOf方法 <br>
					返回指定对角的原始值。不考虑Object.valueOf方法。 </p>
				<p>　另外，这个对象继承了对象的watch和unwatch方法 <br>
				</p>
				<p>　　 例子： <br>
					例１、下述示例脚本使用replace方法来转换串中的单词。在替换的文本中，脚本使用全局 RegExp <br>
					对象的$1和$2属性的值。注意，在作为第二个参数传递给replace方法的时候，RegExp对象的$属性的名 <br>
					称。 <br>
					&lt;SCRIPT LANGUAGE=&quot;JavaScript1.2&quot;&gt; <br>
					re = /(\w+)\s(\w+)/; <br>
					str = &quot;John Smith&quot;; <br>
					newstr=str.replace(re,&quot;$2, $1&quot;); <br>
					document.write(newstr) <br>
					&lt;/SCRIPT&gt; <br>
					显示结果：&quot;Smith, John&quot;. </p>
				<p>　　例２、下述示例脚本中，RegExp.input由Change事件处理句柄设置。在getInfo函数中，exec 方法 <br>
					使用RegExp.input的值作为它的参数，注意RegExp预置了$属性。 <br>
				</p>
				<p>&lt;SCRIPT LANGUAGE=&quot;JavaScript1.2&quot;&gt; <br>
					function getInfo(abc) <br>
					{ <br>
					re = /(\w+)\s(\d+)/; <br>
					re.exec(abc.value); <br>
					window.alert(RegExp.$1 + &quot;, your age is &quot; + RegExp.$2); <br>
					} <br>
					&lt;/SCRIPT&gt; </p>
				<p>　　请输入你的姓和年龄，输入完后按回车键。 <br>
					&lt;FORM&gt;&lt;INPUT TYPE=&quot;TEXT&quot; NAME=&quot;NameAge&quot; onChange=&quot;getInfo(this);&quot;&gt;&lt;/FORM&gt; <br>
					&lt;/HTML&gt; <br>
				</p>
				<p>$1, ..., $9属性 <br>
					用圆括号括着的匹配子串，如果有的话。 <br>
					是RegExp的属性 <br>
					静态，只读 </p>
				<p>在JavaScript 1.2, NES 3.0以上版本提供 <br>
					描述：因为input是静态属性，不是个别正则表达式对象的属性。你可以使用RegExp.input 访问该 <br>
					属性。 </p>
				<p>能加上圆括号的子串的数量不受限制，但正则表达式对象只能保留最后9 条。如果你要访问所有的 <br>
					圆括号内的匹配字串，你可以使用返回的数组。 </p>
				<p>这些属性能用在RegExp.replace方法替换后的字符串(输出结果)。当使用这种方式的时候，不用预 <br>
					先考虑RegExp对象。下面给出例子。当正则表达式中没有包含圆括号的时候，该脚本解释成$n的字面意 <br>
					义。(这里的n是一个正整数)。 <br>
				</p>
				<p>例如： <br>
					下例脚本使用replace 方法来交换串中单词的位置。在替换后的文本字串中，脚本使用正则表达式 <br>
					RegExp对象的$1和$2属性的值。注意：当它们向replace方法传递参数的时候，这里没有考虑 $ 属性的 <br>
					RegExp对象的名称。 <br>
					&lt;SCRIPT LANGUAGE=&quot;JavaScript1.2&quot;&gt; <br>
					re = /(\w+)\s(\w+)/; <br>
					str = &quot;John Smith&quot;; <br>
					newstr=str.replace(re,&quot;$2, $1&quot;); <br>
					document.write(newstr) <br>
					&lt;/SCRIPT&gt; <br>
					显示的输出结果为：Smith, John。 </p>
				<p>&nbsp;</p>
				<p> </p>
				<p>正则表达式regular expression详述(二) <br>
					http://www.kymita.com/888.asp 2002-12-15 蓝箭工作室 <br>
				</p>
				<p>正则表达式详述（二） </p>
				<p>以下这些不是正则表达式的新增对象请参阅对应的JavaScript对象的属性 $_属性 参考input $*属性 <br>
					参考multiline $&amp;属性 参考lastMatch $+属性 参考lastParen $`属性 <br>
					参考leftContext $'属性 参考rightContext compile方法 在脚本运行期间编译正则表达式对象 <br>
					属于RegExp的方法 在JavaScript 1.2, NES 3.0以上版本提供 语法： <br>
					regexp.compile(pattern[, flags]) 以数： regexp 正则表达式的名称，可以是变量名或文字串。 <br>
					pattern 正则表达式的定义文本。 flags 如果指定的话，可以是下面其中的一个： &quot;g&quot;: 匹配所有可能的字串 <br>
					&quot;i&quot;: 忽略大小写 &quot;gi&quot;: 匹配所有可能的字串及忽略大小写 描述： <br>
					使用compile方法来编译一个正则表达式 created with the RegExp constructor function。这样 <br>
					就强制正则表达式只编译一次，而不是每次遇到正则表达式的时候都编译一次。当你确认正则表达式能 <br>
					保持不变的时候可使用compile 方法来编译它(在获得它的匹配模式后)，这样就可以在脚本中重复多次使用它。 <br>
					你亦可以使用compile 方法来改变在运行期间改变正则表达式。例如，假如正则表达式发生变化， <br>
					你可以使用compile方法来重新编译该对象来提高使用效率。 <br>
					使用该方法将改变正则表达式的source, global和ignoreCasesource属性的值。 constructor <br>
					指出建立对象原型的function。注意这个属性的值由函数本身提供，而不是一个字串包含RegExp的name.Property提供。 <br>
					在JavaScript 1.1, NES 2.0以上版本提供 ECMA版本ECMA-262 描述：参考Object.constructor. <br>
					exec方法 在指定的字符串运行匹配搜索。返回一个结果数组。 是RegExp的方法 <br>
					在JavaScript 1.2, NES 3.0以上版本提供 语法： regexp.exec([str])regexp([str]) <br>
					参数： regexp，正则表达式的名称，可以是一个变量名或文字定义串。 <br>
					str，要匹配正则表达式的字符串，如果省略，将使用RegExp.input的值。 <br>
					描述：就如在语法描述中的一样，正则表达工的exec方法能够被直接调用(使用regexp.exec(str))或者间接调用(使用regexp(str))。 <br>
					假如你只是运行以找出是否匹配，可以使用String搜索方法。 <br>
					假如匹配成功，exec方法返回一个数组并且更新正则表达式对象属性的值和预先定义的正则表达式对象、RegExp。如果匹配失败，exec方法返回null。 <br>
					请看下例： &lt;SCRIPT LANGUAGE=&quot;JavaScript1.2&quot;&gt; //匹配一个b接着一个或多个d，再接着一个b <br>
					//忽略大小写 myRe=/d(b+)(d)/ig; myArray = myRe.exec(&quot;cdbBdbsbz&quot;); <br>
					&lt;/SCRIPT&gt; 下面是该脚本的返回值：对象 属性/Index 描述 例子 <br>
					myArray </p>
				<p>myArray的内容 [&quot;dbBd&quot;, &quot;bB&quot;, &quot;d&quot;] <br>
					index <br>
					基于0的匹配index 1 <br>
					input <br>
					原始字符串 cdbBdbsbz <br>
					[0] <br>
					最后匹配的字符 dbBd <br>
					[1], ...[n] <br>
					用圆括号括住的匹配字符串，如果有的话。不限制括号的个数。 [1] = bB <br>
					[2] = d <br>
					myRe <br>
					lastIndex <br>
					开始下次匹配操作的index值 5 <br>
					ignoreCase <br>
					指出&quot;i&quot;是否使用以忽略大小写 true <br>
					global <br>
					指出是否使用&quot;g&quot;标记来进行匹配所有可能的字串 true <br>
					source <br>
					定义模式的文本字符串 d(b+)(d) <br>
					RegExp <br>
					lastMatch$&amp; <br>
					最后匹配的字符 dbBd <br>
					leftContext$\Q <br>
					最新匹配前面的子串 c <br>
					rightContext$' <br>
					最新匹配后面的子串 bsbz <br>
					$1, ...$9 <br>
					圆括号内的匹配子串，如果有的话。圆括号的个数不受限制，但RegExp只能保留最后9个 $1 = bB <br>
					$2 = d <br>
					lastParen $+ <br>
					最后一个加上圆括号的匹配子串，如果有的话 d </p>
				<p>假如你的正则表达式使用了&quot;g&quot;标记，你可以多次使用exec 方法来连续匹配相同的串。当你这样做 <br>
					的时候，新的匹配将从由正则表达式的lastIndex 属性值确定的子串中开始。例如，假定你使用下面的脚本： <br>
					&lt;SCRIPT LANGUAGE=&quot;JavaScript1.2&quot;&gt; myRe=/ab*/g;str = &quot;abbcdefabh&quot; <br>
					myArray = myRe.exec(str); <br>
					document.writeln(&quot;Found &quot;+myArray[0]+&quot;. Next match starts at &quot;+myRe.lastIndex) <br>
					mySecondArray = myRe.exec(str); <br>
					document.writeln(&quot;Found &quot;+mySecondArray[0]+&quot;. Next match starts at &quot;+myRe.lastIndex) <br>
					&lt;/SCRIPT&gt; 这个脚本显示如下结果： Found abb. Next match starts at 3 <br>
					Found ab. Next match starts at 9 例子： <br>
					在下面的例子中，用户输入一个名字，脚本根据输入执行匹配操作。接着检查数组看是否和其它用户的名字匹配。 <br>
					本脚本假定已注册的用户的姓已经存进了数组A中，或许从一个数据库中取得。 &lt;HTML&gt; <br>
					&lt;SCRIPT LANGUAGE=&quot;JavaScript1.2&quot;&gt; A = [&quot;zhao&quot;,&quot;qian&quot;,&quot;sun&quot;,&quot;li&quot;,&quot;liang&quot;] <br>
					function lookup() { firstName = /\w+/i(); if (!firstName) <br>
					window.alert (RegExp.input + &quot;非法输入&quot;); else { count=0; <br>
					for (i=0;i 输入你的姓然后按回车键。 <br>
					&lt;FORM&gt;&lt;INPUT TYPE:&quot;TEXT&quot; NAME=&quot;FirstName&quot; onChange=&quot;lookup(this);&quot;&gt;&lt;/FORM&gt; <br>
					&lt;/HTML&gt; global属性 正则表达式中是否使用了&quot;g&quot;标记。 RegExp属性，只读 <br>
					在JavaScript 1.2, NES 3.0以上版本提供 描述： global是一个个别正则表达式对象的属性 <br>
					如果使用了&quot;g&quot;标记，global的值为true；否则为 false。&quot;g&quot;标记指定正则表达式测试所有可能的匹配。 <br>
					你不能直接改变该属性的值，但可以调用compile方法来改变它。 ignoreCase 检查正则表达式是否使用了&quot;i&quot;标记 <br>
					RegExp属性，只读 在JavaScript 1.2, NES 3.0以上版本提供 描述： <br>
					ignoreCase是个别正则表达式对象的一个属性。 <br>
					如果使用了&quot;i&quot;标记，则返回true，否则返回false。&quot;i&quot;标记指示在进行匹配的时候忽略大小写。 <br>
					你不能直接改变该属性的值，但可以通过调用compile方法来改变它 input 指出正则表达式要测试那个字串。$_是这个属性的另一个名字。 <br>
					RegExp的属性，静态 在JavaScript 1.2, NES 3.0以上版本提供 <br>
					描述：因为input是静态的，不是某个个别的正则表达式对象的属性。你也可以使用 RegExp.input来表示。 <br>
					如果没有给正则表达式的exec或test方法提供字符串，并且RegExp.input中有值，则使用它的值来调用该方法。 <br>
					脚本或浏览器能够预置input属性。如果被预置了值且调用exec或 test方法的时候没有提供字符串 <br>
					则调用exec或test的时候使用input的值。input可以被浏览器以下面的方式设置： <br>
					当text表单域处理句柄被调用的时候，input被设置为该text输入的字串。 <br>
					当textarea表单域处理句柄被调用的时候，input被设置为textarea域内输入的字串。注意multili <br>
					ne亦被设置成true从而能匹配多行文本。 当select表单域处理句柄被调用的时候，input被设置成selected text的值。 <br>
					当链接对象的处理句柄被调用的时候，input被设置成&lt;A HREF=...&gt;和&lt;/A&gt;之间的字符串。 <br>
					事件理现句柄处理完毕后，input属性的值被清除。 lastIndex 可读/可写的一个整数属性，指出下一次匹配从哪里开始。 <br>
					RegExp的属性 在JavaScript 1.2, NES 3.0以上版本提供 <br>
					描述：lastIndex 是个别的正则表达式对象的属性。 这个属性只有当正则表达式的&quot;g&quot;标记被使用以进行全串匹配的时候才被设置。实行以下规则： <br>
					如果lastIndex大小字符串的长度，regexp.test和regexp.exec失败，且lastIndex被设为0。 <br>
					如果lastIndex等于字串的长度且正则表达式匹配空字符串，则正则表达式从lastIndex的位置开始匹配。 <br>
					如果lastIndex等于字符串的长度且正则表达式不匹配空字符串，则正则表达式不匹配input，且lastIndex被置为0。 <br>
					否则，lastIndex被设置成最近一次匹配的下一点。 例如，按下面的顺序执行脚本： re = /(hi)?/g 匹配空字符串 <br>
					re(&quot;hi&quot;) 返回[&quot;hi&quot;, &quot;hi&quot;]，lastIndex置为2 <br>
					re(&quot;hi&quot;) 返回[&quot;&quot;]，一个空数组，它的下标为0的元素就是匹配字符串。在这种情况下，返回空 <br>
					串是因为lastIndex等于2(且仍然是2)，并且&quot;hi&quot;的长度也是2。 lastMatch 最后一次匹配字符串，$&amp;是同样的意思。 <br>
					RegExp的属性，静态，只读 在JavaScript 1.2, NES 3.0以上版本提供 <br>
					描述：因为lastMatch是静态的，所以它不是个别指定正则表达式的属性。你也可以使用RegExp.lastMatch。 lastParen <br>
					最后一次加上括号的匹配字符串，如果有的话。$+是同样的意思。 RegExp属性，静态，只读 <br>
					在JavaScript 1.2, NES 3.0以上版本提供 <br>
					描述：因为lastParen是静态的，它不是某个个别正则式的属性，你可以使用RegExp.lastParen 表达同样的意思。 <br>
					leftContext 最近一次匹配前面的子串，$`具有相同的意思。 RegExp的属性，静态，只读 <br>
					在JavaScript 1.2, NES 3.0以上版本提供 <br>
					描述：因为leftContext是静态的，不是某一个正则表达式的属性，所以可以使用RegExp.leftContext来表达想同的意思。 <br>
					multiline 反映是否匹配多行文本，$*是相同的意思。 RegExp的属性，静态 <br>
					在JavaScript 1.2, NES 3.0以上版本提供 <br>
					描述：因为multiline是静态的，而不是某个个别正则表达式的属性，所以能够用RegExp.multiline表达相同的意思。 <br>
					如果允许匹配多行文本，则multiline为true，如果搜索必须在换行时停止，则为false。 <br>
					脚本或浏览器能够设置multiline属性。当一个textarea的事件处理句柄被调用的时候，multiline <br>
					被置为true。在事件处理句柄处理完毕后，multiline属性值被清除。也就是说，如果你设置了multili <br>
					ne为true，则执行任何的事件处理句柄后，multiline被置为false。 prototype <br>
					描绘类的原型。你可以根据要求使用prototype来增加类的属性或方法。为了获得prototypes 的资 <br>
					料，请参阅RegExp的Function.prototype.Property属性。 从JavaScript 1.1, NES 2.0版本开始提供 <br>
					ECMA版本ECMA-262 rightContext 最后一次匹配的右边的字符串，$'是同样的效果。 <br>
					RegExp的属性，静态，只读 从 JavaScript 1.2, NES 3.0以上版本开始提供 <br>
					描述：因为rightContext是静态的，不是某个个别正则表达工的属性，可以使用RegExp.rightContext来达到相同的效果。 <br>
					source 一个只读属性，包含正则表达式定义的模式，不包侨forward slashes和&quot;g&quot;或&quot;i&quot;标记。 RegExp的属性，只读 <br>
					从JavaScript 1.2, NES 3.0以上版本开始提供 <br>
					描述：source是个别正则表达式对象的属性，你不能直接改变它的值，但可以通过调用compile 方法来改变它。 test <br>
					执行指定字符串的正则表达式匹配搜索，返回true或false。 RegExp的方法 <br>
					从JavaScript 1.2, NES 3.0以上版本开始提供 语法：regexp.test([str]) <br>
					参数：regexp，正则表达式的名称，可以是变量名或正则表达式定义文字串 <br>
					str，要匹配的字符串，如果省略，将使用RegExp.input的值为作参数 <br>
					描述：当你需要知道一个字符串能否匹配某个正则表达工，可以使用test方法(与String.search方 <br>
					法类似)； 为了获得更多的信息(但速度将变慢)，可以使用exec方法(与String.match方法类似)。 例子：下面的例子显示test是否成功的提示： <br>
					function testinput(re, str){ <br>
					if (re.test(str)) midstring = &quot; contains &quot;; <br>
					else midstring = &quot; does not contain &quot;; <br>
					document.write (str + midstring + re.source); } toSource <br>
					返回一个字符串象征对象的源码 RegExp的方法 从JavaScript 1.3以上版本开始提供 语法：toSource() <br>
					参数：没有 描述：toSource方法返回下述的值： 对于内置的RegExp对象，toSource返回下面的字符象征源码不可用： <br>
					function Boolean(){ [native code] } <br>
					在RegExp场合中, toSource返回象征源码的字符串，通常这个方法是由JavaScript内部自动调用而不是不代码中显式调用。 <br>
					更多请看Object.toSource toString 返回描绘指定对象的字符串。 RegExp的方法 <br>
					从JavaScript 1.1, NES 2.0开始提供 ECMA版本ECMA-262 语法：toString() 参数：无 <br>
					描述：RegExp对象不考虑Object对象的toString方法；它不继承Object.toString，对于RegExp 对 <br>
					象，toString方法返回一个代表该对象的字符串。 例如：下面的例子显示象征RegExp对象的字符串 <br>
					myExp = new RegExp(&quot;a+b+c&quot;); alert(myExp.toString()) <br>
					displays &quot;/a+b+c/&quot; 更多请看：Object.toString valueOf 返回一个RegExp对象的原始值 <br>
					RegExp的方法 从JavaScript 1.1版本开始提供 ECMA版本：ECMA-262 语法：valueOf() <br>
					参数：无 描述：RegExp的valueOf方法以字符串形式返回RegExp对象的原始值，这个值与RegExp.toString相等。 <br>
					该方法通常由JavaScript内部自动调用而不是显式调用 例子： myExp = new RegExp(&quot;a+b+c&quot;); <br>
					alert(myExp.valueOf()) displays &quot;/a+b+c/&quot;</p>
				<p>&nbsp;</p>
				<p>&nbsp;</p>
				<p>&nbsp;</p>
				<p>&nbsp;</p>
				<p></p>
			</dd>
		</dl>
		<dl>
			<dt>自定义方法</dt>
			<dd>
				<p>在说这个话题之前，我想先说几句题外话：最近偶然碰到有朋友问我&quot;hoisting&quot;的问题。即在js里所有变量的声明都是置顶的，而赋值则是在之后发生的。可以看看这个例子： </p>
				<p> var a = 'global';    (function () {        alert(a);        var a = 'local';    })(); </p>
				<p>　　大家第一眼看到这个例子觉得输出结果是什么？'global'？还是'local'？其实都不是，输出的是undefined，不用迷惑，我的题外话就是为了讲这个东西的。<br>
					其实很简单，看一看JavaScript运行机制就会明白。我们可以把这种现象看做&quot;预声明&quot;。但是如果稍微深究一下，会明白得更透彻。<br>
					这里其实涉及到对象属性绑定机制。因为所有JavaScript函数都是一个对象。在函数里声明的变量可以看做这个对象的&quot;类似属性&quot;。对象属性的绑定在语言里是有分&quot;早绑定&quot;和&quot;晚绑定&quot;之分的。</p>
				<p> </p>
				<p>　　【早绑定】<br>
					是指在实例化对象之前定义其属性和方法。解析程序时可以提前转换为机器代码。通常的强类型语言如C++，java等，都是早绑定机制的。而JavaScript不是强类型语言。它使用的是&quot;晚绑定&quot;机制。</p>
				<p>　　【晚绑定】<br>
					是指在程序运行前，无需检查对象类型，只要检查对象是否支持特性和方法即可。可以在绑定前对对象执行大量操作而不受任何惩罚。<br>
					上面代码出现的&quot;预声明&quot;现象，我们大可用&quot;晚绑定&quot;机制来解释。在函数的作用域中，所有变量都是&quot;晚绑定&quot;的。 即声明是顶级的。所以上面的代码和下面的一致： </p>
				<p> var a = 'global';    (function () {        var a;        alert(a);        a = 'local';    })(); </p>
				<p>在alert(a)之前只对a作了声明而没有赋值。所以结果可想而知。</p>
				<p> </p>
				<p>&lt;!-- 题外话到此结束 --&gt;</p>
				<p>　　RT:本文要说的是，在JavaScript里，我所知道的几种定义类和对象的方式：&lt;! -- 声明：以下内容大部分来自《JavaScript高级程序设计》，只是个人叙述方式不同而已 -- &gt;</p>
				<p>　　【直接量方式】<br>
					使用直接量构建对象是最基础的方式，但也有很多弊端。 </p>
				<p>var Obj = new Object;Obj.name = 'sun';Obj.showName = function() {    alert('this.name');} </p>
				<p>我们构建了一个对象Obj，它有一个属性name，一个方法showName。但是如果我们要再构建一个类似的对象呢？难道还要再重复一遍？<br>
					NO！，我们可以用一个返回特定类型对象的工厂函数来实现。就像工厂一样，流水线的输出我们要的特定类型结果。<br>
					【工厂方式】 </p>
				<p>function createObj(name) {    var tempObj = new Object;    tempObj.name = name;    tempObj.showName = function () {        alert(this.name);    };    return tempObj;}var obj1 = createObj('obj_one');var obj2 = createObj('obj_two'); </p>
				<p>这种工厂函数很多人是不把他当做构建对象的一种形式的。一部分原因是语义：即它并不像使用了运算符new来构建的那么正规。还有一个更大的原因，是因为这个工厂每次产出一个对象都会创建一个新函数showName(),即每个对象拥有不同的版本，但实际上他们共享的是同一个函数。<br>
					有些人把showName在工厂函数外定义，然后通过属性指向该方法，可以避开这个问题： </p>
				<p>代码 <br>
				</p>
				<p>可惜的是，这种方式让showName()这个函数看起来不像对象的一个方法。<br>
					【构造函数方式】<br>
					这种方式是为了解决上面工厂函数的第一个问题，即没有new运算符的问题。可是第二个问题它依然不能解决。我们来看看。 </p>
				<p>function Obj(name) {    this.name = name;    this.showName = function () {        alert(this.name);    }}var obj1 = new Obj('obj_one');var obj2 = new Obj('obj_two'); </p>
				<p>它的好处是不用在构造函数内新建一个对象了，因为new运算符执行的时候会自动创建一个对象，并且只有通过this才能访问这个对象。所以我们可以直接通过this来对这个对象进行赋值。而且不用再return，因为this指向默认为构造函数的返回值。<br>
					同时，用了new关键字来创建我们想要的对象是不是感觉更&quot;正式&quot;了。<br>
					可惜，它仍然不能解决会重复生成方法函数的问题，这个情况和工厂函数一样。</p>
				<p> </p>
				<p>　　【原型方式】<br>
					这种方式对比以上方式，有个很大的优势，就是它解决了方法函数会被生成多次的问题。它利用了对象的prototype属性。我们依赖原型可以重写对象实例。</p>
				<p>var Obj = function () {}Obj.prototype.name = 'me';Obj.prototype.showName = function () {    alert(this.name);}var obj1 = new Obj();var obj2 = new Obj();我们依赖原型对构造函数进行重写，无论是属性还是方法都是通过原型引用的方式给新建的对象，因此都只会被创建一次。可惜的是，这种方式存在两个致命的问题：<br>
					1。没办法在构建对象的时候就写入想要的属性，因为原型在构造函数作用域外边，没办法通过传递参数的方式在对象创建的时候就写入属性值。只能在对象创建完毕后对值进行重写。<br>
					2。致命问题在于当属性指向对象时，这个对象会被多个实例所共享。考虑下面的代码： </p>
				<p>var Obj = function () {}Obj.prototype.name = 'me';Obj.prototype.flag = new Array('A', 'B');Obj.prototype.showName = function () {    alert(this.name);}var obj1 = new Obj();var obj2 = new Obj();obj1.flag.push('C');alert(obj1.flag); // A,B,Calert(obj2.flag); //A,B,C </p>
				<p>是的，当flag属性指向对象时，那么实例obj1和obj2都共享它，哪怕我们仅仅改变了obj1的flag属性，但是它的改变在实例obj2中任然可见。<br>
					面对这个问题，让我们不得不想是否应该把【构造函数方式】和【原型方式】结合起来，让他们互补。。。</p>
				<p> </p>
				<p>　　【构造函数和原型混合方式】<br>
					我们让属性用构造函数方式创建，方法用原型方式创建即可： </p>
				<p>var Obj = function (name) {    this.name = name;    this.flag = new Array('A', 'B');}Obj.prototype = {    showName : function () {        alert(this.name);    }}var obj1 = new Obj();var obj2 = new Obj();obj1.flag.push('C');alert(obj1.flag); // A,B,Calert(obj2.flag); //A,B这种方式有效地结合了原型和构造函数的优势，是目前用的最多，也是副作用最少的方式。<br>
					不过，有些追求完美的家伙还不满足，因为在视觉上还没达到他们的要求，因为通过原型来创建方法的过程在视觉上还是会让人觉得它不太像实例的方法（尤其对于传统OOP语言的开发者来说。）<br>
					所以，我们可以让原型活动起来，让他也加入到构造函数里面去，好让这个构造函数在视觉上更为统一。而这一系列的过程只需用一个判断即可完成。</p>
				<p> </p>
				<p>var Obj = function (name) {    this.name = name;    this.flag = new Array('A', 'B');    if (typeof Obj._init == 'undefined') {        Obj.prototype = {            showName : function () {                alert(this.name);            }        };        Obj._init = true;    }}如上，用_init作为一个标志来判断是否已经给原型创建了方法。如果是那么就不再执行。这样其实在本质上是没有任何变化的，方法仍是通过原型创建，唯一的区别在于这个构造函数看起来&quot;江山统一&quot;了。</p>
			</dd>
		</dl>
		<dl>
			<dt>dom最常用API</dt>
			<dd>
				<p>document方法： <br>
					getElementById(id) Node 返回指定结点的引用 <br>
					getElementsByTagName(name) NodeList 返回文档中所有匹配的元素的集合 <br>
					createElement(name) Node Node <br>
					createTextNode(text) Node 创建一个纯文本结点 <br>
					ownerDocument Document 指向这个节点所属的文档 <br>
					documentElement Node 返回html节点 <br>
					document.body Node 返回body节点 </p>
				<p>element方法： <br>
					getAttribute(attributeName) String 返回指定属性的值 <br>
					setAttribute(attributeName,value) String 给属性赋值 <br>
					removeAttribute(attributeName) String 移除指定属性和它的值 <br>
					getElementsByTagName(name) NodeList 返回结点内所有匹配的元素的集合 </p>
				<p>node方法： <br>
					appendChild(child) Node 给指定结点添加一个新的子结点 <br>
					removeChild(child) Node 移除指定结点的子结点 <br>
					replaceChild(newChild,oldChild) Node 替换指定结点的子结点 <br>
					insertBefore(newChild,refChild) Node 在同一层级的结点前面插入新结点 <br>
					hasChildNodes() Boolean 如果结点有子结点则返回true </p>
				<p>node属性： <br>
					nodeName String 以字符串的格式存放结点的名称 <br>
					nodeType String 以整型数据格式存放结点的类型 <br>
					nodeValue String 以可用的格式存放结点的值 <br>
					parentNode Node 指向结点的父结点的引用 <br>
					childNodes NodeList 指向子结点的引用的集合 <br>
					firstChild Node 指向子结点结合中的第一个子结点的引用 <br>
					lastChild Node 指向子结点结合中的最后一个子结点的引用 <br>
					previousSibling Node 指向前一个兄弟节点；如果这个节点就是兄弟节点，那么该值为null <br>
					nextSibling Node 指向后一个兄弟节点；如果这个节点就是兄弟节点，那么该值为null </p>
			</dd>
		</dl>
		<dl>
			<dt>数组API</dt>
			<dd>
				<p>//定义数组<br>
					var pageIds = new Array();<br>
					pageIds.push('A');</p>
				<p> 数组长度<br>
					pageIds.length;</p>
				<p>//shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.shift(); //a：[2,3,4,5]   b：1 </p>
				<p>//unshift：将参数添加到原数组开头，并返回数组的长度 <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.unshift(-2,-1); //a：[-2,-1,1,2,3,4,5]   b：7 <br>
					//注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。 </p>
				<p>//pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.pop(); //a：[1,2,3,4]   b：5 </p>
				<p>//push：将参数添加到原数组末尾，并返回数组的长度 <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.push(6,7); //a：[1,2,3,4,5,6,7]   b：7 </p>
				<p>//concat：返回一个新数组，是将参数添加到原数组中构成的 <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.concat(6,7); //a：[1,2,3,4,5]   b：[1,2,3,4,5,6,7] </p>
				<p>//splice(start,deleteCount,val1,val2,)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2, <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.splice(2,2,7,8,9); //a：[1,2,7,8,9,5]   b：[3,4] <br>
					var b = a.splice(0,1); //同shift <br>
					a.splice(0,0,-2,-1); var b = a.length; //同unshift <br>
					var b = a.splice(a.length-1,1); //同pop <br>
					a.splice(a.length,0,6,7); var b = a.length; //同push </p>
				<p>//reverse：将数组反序 <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.reverse(); //a：[5,4,3,2,1]   b：[5,4,3,2,1] </p>
				<p>//sort(orderfunction)：按指定的参数对数组进行排序 <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.sort(); //a：[1,2,3,4,5]   b：[1,2,3,4,5] </p>
				<p>//slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组 <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.slice(2,5); //a：[1,2,3,4,5]   b：[3,4,5] </p>
				<p>//join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符 <br>
					var a = [1,2,3,4,5]; <br>
					var b = a.join(&quot;|&quot;); //a：[1,2,3,4,5]   b：&quot;1|2|3|4|5&quot; </p>
			</dd>
		</dl>
		<dl>
			<dt>面向对象的方法实现继承call方法</dt>
			<dd>// 动物类 animal<br>
				function animal(bSex){<br>
				this.sex = bSex<br>
				this.getSex = function(){<br>
				return this.sex<br>
				}<br>
				}<br>
				// 类静态变量 (如果你不修改它的话～～)<br>
				animal.SEX_G = new Object();    // 雌性<br>
				animal.SEX_B = new Object();    // 雄性<br>
				// 动物子类 鸟<br>
				function bird(bSex){<br>
				animal.call(this, bSex);<br>
				this.fly = function(iSpeed){<br>
				alert(&quot;飞行时速高达 &quot; + iSpeed);<br>
				}<br>
				}<br>
				// 动物子类 鱼<br>
				function fish(bSex){<br>
				animal.call(this, bSex);<br>
				this.swim = function(iSpeed){<br>
				alert(&quot;游动时速高达 &quot; + iSpeed)<br>
				}<br>
				}<br>
				// 鱼 鸟 杂交品种。。。<br>
				function crossBF(bSex){<br>
				bird.call(this, bSex);<br>
				fish.call(this, bSex);<br>
				}<br>
				var oPet = new crossBF(animal.SEX_G);    // 雌性 鱼鸟<br>
				alert(oPet.getSex() == animal.SEX_G ? &quot;雌性&quot; : &quot;雄性&quot;);<br>
				oPet.fly(124)<br>
				oPet.swim(254)</dd>
		</dl>
		<dl>
			<dt>堆栈</dt>
			<dd>function stack(){<br>
				if(this.top==undefined){<br>
				//初始化堆栈的顶部指针和数据存放域<br>
				this.top=0;<br>
				this.unit=new Array();<br>
				}<br>
				this.push=function(pushvalue){<br>
				//定义压入堆栈的方法 <br>
				this.unit[this.top]=pushvalue;<br>
				this.top+=1; <br>
				}<br>
				this.readAllElements=function(){<br>
				//定义读取所有数据的方法<br>
				if(this.top==0){<br>
				alert(&quot;当前栈空，无法读取数据&quot;);<br>
				return(&quot;&quot;);<br>
				}<br>
				var count=0;<br>
				var outStr=&quot;&quot;;<br>
				<br>
				for(count=0;count&lt;this.top;count++){<br>
				outStr+=this.unit[count]+&quot;,&quot;;<br>
				} <br>
				return(outStr);<br>
				}<br>
				this.pop=function(){<br>
				//定义弹出堆栈的方法<br>
				if(this.top==0){<br>
				alert(&quot;当前栈空，无法弹出数据&quot;);<br>
				return(&quot;&quot;);<br>
				}<br>
				var      popTo=this.unit[this.top-1];<br>
				this.top--;<br>
				return(popTo);<br>
				/* 从堆栈弹出数据，顶部指针减一，不过这里没有做到资源的释放，也<br>
				就是说数据仍然存在于this.unit的数组中，只不过无法访问罢了。目前<br>
				我也没想到好的办法解决。*/<br>
				}<br>
				}</dd>
		</dl>
		<dl>
			<dt>全选反选</dt>
			<dd>&lt;script&gt;<br>
				function SelectAll() {<br>
				var checkboxs=document.getElementsByName(&quot;checkboxid&quot;);<br>
				for (var i=0;i&lt;checkboxs.length;i++) {<br>
				var e=checkboxs[i];<br>
				e.checked=!e.checked;<br>
				}<br>
				}<br>
				&lt;/script&gt;<br>
				&lt;a href=&quot;#&quot; onclick=&quot;SelectAll()&quot;&gt;全选/反选&lt;/a&gt;<br>
				&lt;form name=&quot;checkboxform&quot;&gt;<br>
				&lt;input type=&quot;checkbox&quot; name=&quot;checkboxid&quot; id=&quot;checkboxid&quot; value=&quot;&lt;%=rst(&quot;fo_id&quot;)%&gt;&quot; /&gt;<br>
				&lt;/form&gt;</dd>
		</dl>
		<dl>
			<dt>复制到剪贴板</dt>
			<dd>&lt;script language=&quot;javascript&quot;&gt;<br>
				function copyToClipBoard()<br>
				{<br>
				var clipBoardContent=&quot;&quot;;<br>
				clipBoardContent = document.getElementById(&quot;txtIntroduceUrl&quot;).value;<br>
				window.clipboardData.setData(&quot;Text&quot;,clipBoardContent);<br>
				alert(&quot;复制成功，请粘贴后推荐给您的好友！&quot;);<br>
				}<br>
				&lt;/script&gt;</dd>
		</dl>
		<dl>
			<dt>数学函数</dt>
			<dd>·Math对象 <br>
				1. Math.abs(num) : 返回num的绝对值 <br>
				2. Math.acos(num) : 返回num的反余弦值 <br>
				3. Math.asin(num) : 返回num的反正弦值 <br>
				4. Math.atan(num) : 返回num的反正切值 <br>
				5. Math.atan2(y,x) : 返回y除以x的商的反正切值 <br>
				6. Math.ceil(num) : 返回大于num的最小整数 <br>
				7. Math.cos(num) : 返回num的余弦值 <br>
				8. Math.exp(x) : 返回以自然数为底,x次幂的数 <br>
				9. Math.floor(num) : 返回小于num的最大整数 <br>
				10.Math.log(num) : 返回num的自然对数 <br>
				11.Math.max(num1,num2) : 返回num1和num2中较大的一个 <br>
				12.Math.min(num1,num2) : 返回num1和num2中较小的一个 <br>
				13.Math.pow(x,y) : 返回x的y次方的值 <br>
				14.Math.random() : 返回0到1之间的一个随机数 <br>
				15.Math.round(num) : 返回num四舍五入后的值 <br>
				16.Math.sin(num) : 返回num的正弦值 <br>
				17.Math.sqrt(num) : 返回num的平方根 <br>
				18.Math.tan(num) : 返回num的正切值 <br>
				19.Math.E : 自然数(2.718281828459045) <br>
				20.Math.LN2 : 2的自然对数(0.6931471805599453) <br>
				21.Math.LN10 : 10的自然对数(2.302585092994046) <br>
				22.Math.LOG2E : log 2 为底的自然数(1.4426950408889634) <br>
				23.Math.LOG10E : log 10 为底的自然数(0.4342944819032518) <br>
				24.Math.PI : π(3.141592653589793) <br>
				25.Math.SQRT1_2 : 1/2的平方根(0.7071067811865476) <br>
				26.Math.SQRT2 : 2的平方根(1.4142135623730951) </dd>
		</dl>
		<dl>
			<dt>浏览器特征函数</dt>
			<dd>
				<p>1.浏览器名称 <br>
					//IE : &quot;Microsoft Internet Explorer&quot; <br>
					//NS : &quot;Netscape&quot; <br>
					var browserName = navigator.appName; </p>
				<p> 2.浏览器版本 <br>
					bar browserVersion = navigator.appVersion; </p>
				<p> 3.客户端操作系统 <br>
					var isWin = ( navigator.userAgent.indexOf(&quot;Win&quot;) != -1 ); <br>
					var isMac = ( navigator.userAgent.indexOf(&quot;Mac&quot;) != -1 ); <br>
					var isUnix = ( navigator.userAgent.indexOf(&quot;X11&quot;) != -1 ); </p>
				<p> 4.判断是否支持某对象,方法,属性 <br>
					//当一个对象,方法,属性未定义时会返回undefined或null等,这些特殊值都是false <br>
					if( document.images ){ } <br>
					if( document.getElementById ){ } </p>
				<p> 5.检查浏览器当前语言 <br>
					if( navigator.userLanguage ){ var l = navigator.userLanguage.toUpperCase(); } </p>
				<p> 6.检查浏览器是否支持Cookies <br>
					if( navigator.cookieEnabled ){ } </p>
			</dd>
		</dl>
		<dl>
			<dt>预加载图像</dt>
			<dd>(new Image()).src="/images/logo.png" ;</dd>
		</dl>
		<dl>
			<dt>常用的数字函数</dt>
			<dd>
				<p>·数字型(Number) <br>
					1.声明 <br>
					var i = 1; <br>
					var i = new Number(1); </p>
				<p> 2.字符串与数字间的转换 <br>
					var i = 1; <br>
					var str = i.toString();     //结果: &quot;1&quot; <br>
					var str = new String(i);    //结果: &quot;1&quot; <br>
					i = parseInt(str);          //结果: 1 <br>
					i = parseFloat(str);        //结果: 1.0 <br>
					<br>
					//注意: parseInt,parseFloat会把一个类似于&quot;32G&quot;的字符串,强制转换成32 </p>
				<p> 3.判断是否为有效的数字 <br>
					var i = 123;  var str = &quot;string&quot;; <br>
					if( typeof i == &quot;number&quot; ){ }   //true <br>
					<br>
					//某些方法(如:parseInt,parseFloat)会返回一个特殊的值NaN(Not a Number) <br>
					//请注意第2点中的[注意],此方法不完全适合判断一个字符串是否是数字型!! <br>
					i = parseInt(str); <br>
					if( isNaN(i) ){ } <br>
					<br>
					4.数字型比较 <br>
					//此知识与[字符串比较]相同 </p>
				<p> 5.小数转整数 <br>
					var f = 1.5; <br>
					var i = Math.round(f);  //结果:2 (四舍五入) <br>
					var i = Math.ceil(f);   //结果:2 (返回大于f的最小整数) <br>
					var i = Math.floor(f);  //结果:1 (返回小于f的最大整数) </p>
				<p> 6.格式化显示数字 <br>
					var i = 3.14159; <br>
					<br>
					//格式化为两位小数的浮点数 <br>
					var str = i.toFixed(2);     //结果: &quot;3.14&quot; <br>
					<br>
					//格式化为五位数字的浮点数(从左到右五位数字,不够补零) <br>
					var str = i.toPrecision(5); //结果: &quot;3.1415&quot; </p>
				<p> 7.X进制数字的转换 <br>
					//不是很懂 -.- <br>
					var i = parseInt(&quot;0x1f&quot;,16); <br>
					var i = parseInt(i,10); <br>
					var i = parseInt(&quot;11010011&quot;,2); </p>
				<p> 8.随机数 <br>
					//返回0-1之间的任意小数 <br>
					var rnd = Math.random(); <br>
					//返回0-n之间的任意整数(不包括n) <br>
					var rnd = Math.floor(Math.random() * n) </p>
			</dd>
		</dl>
		<dl>
			<dt>最常用字符串函数API</dt>
			<dd>
				<p>·字符串(String) <br>
					1.声明 <br>
					var myString = new String(&quot;Every good boy does fine.&quot;); <br>
					var myString = &quot;Every good boy does fine.&quot;; </p>
				<p> 2.字符串连接 <br>
					var myString = &quot;Every &quot; + &quot;good boy &quot; + &quot;does fine.&quot;; <br>
					var myString = &quot;Every &quot;;  myString += &quot;good boy does fine.&quot;; </p>
				<p> 3.截取字符串 <br>
					//截取第 6 位开始的字符 <br>
					var myString = &quot;Every good boy does fine.&quot;; <br>
					var section = myString.substring(6);    //结果: &quot;good boy does fine.&quot; <br>
					<br>
					//截取第 0 位开始至第 10 位为止的字符 <br>
					var myString = &quot;Every good boy does fine.&quot;; <br>
					var section = myString.substring(0,10); //结果: &quot;Every good&quot; <br>
					<br>
					//截取从第 11 位到倒数第 6 位为止的字符 <br>
					var myString = &quot;Every good boy does fine.&quot;; <br>
					var section = myString.slice(11,-6);    //结果: &quot;boy does&quot; <br>
					<br>
					//从第 6 位开始截取长度为 4 的字符 <br>
					var myString = &quot;Every good boy does fine.&quot;; <br>
					var section = myString.substr(6,4);     //结果: &quot;good&quot; </p>
				<p> 4.转换大小写 <br>
					var myString = &quot;Hello&quot;; <br>
					var lcString = myString.toLowerCase();  //结果: &quot;hello&quot; <br>
					var ucString = myString.toUpperCase();  //结果: &quot;HELLO&quot; </p>
				<p> 5.字符串比较 <br>
					var aString = &quot;Hello!&quot;; <br>
					var bString = new String(&quot;Hello!&quot;); <br>
					if( aString == &quot;Hello!&quot; ){ }    //结果: true <br>
					if( aString == bString ){ }     //结果: true <br>
					if( aString === bString ){ }    //结果: false (两个对象不同,尽管它们的值相同) </p>
				<p> 6.检索字符串 <br>
					var myString = &quot;hello everybody.&quot;; <br>
					// 如果检索不到会返回-1,检索到的话返回在该串中的起始位置 <br>
					if( myString.indexOf(&quot;every&quot;) &gt; -1 ){ } //结果: true </p>
				<p> 7.查找替换字符串 <br>
					var myString = &quot;I is your father.&quot;; <br>
					var result = myString.replace(&quot;is&quot;,&quot;am&quot;);   //结果: &quot;I am your father.&quot; </p>
				<p> 8.特殊字符: <br>
					\b : 后退符         \t : 水平制表符 <br>
					\n : 换行符         \v : 垂直制表符 <br>
					\f : 分页符         \r : 回车符 <br>
					\&quot; : 双引号         \' : 单引号 <br>
					\\ : 反斜杆 </p>
				<p> 9.将字符转换成Unicode编码 <br>
					var myString = &quot;hello&quot;; <br>
					var code = myString.charCodeAt(3);  //返回&quot;l&quot;的Unicode编码(整型) <br>
					var char = String.fromCharCode(66); //返回Unicode为66的字符 </p>
				<p> 10.将字符串转换成URL编码 <br>
					var myString = &quot;hello all&quot;; <br>
					var code = encodeURI(myString);     //结果: &quot;hello%20all&quot; <br>
					var str = decodeURI(code);          //结果: &quot;hello all&quot; <br>
					//相应的还有:  encodeURIComponent()  decodeURIComponent() </p>
			</dd>
		</dl>
		<dl>
			<dt>最常用的日期函数</dt>
			<dd>
				<p>·日期型(Date) <br>
					1.声明 <br>
					var myDate = new Date();    //系统当前时间 <br>
					var myDate = new Date(yyyy, mm, dd, hh, mm, ss); <br>
					var myDate = new Date(yyyy, mm, dd); <br>
					var myDate = new Date(&quot;monthName dd, yyyy hh:mm:ss&quot;); <br>
					var myDate = new Date(&quot;monthName dd, yyyy&quot;); <br>
					var myDate = new Date(epochMilliseconds); </p>
				<p> 2.获取时间的某部份 <br>
					var myDate = new Date(); <br>
					myDate.getYear();       //获取当前年份(2位) <br>
					myDate.getFullYear();   //获取完整的年份(4位,1970-????) <br>
					myDate.getMonth();      //获取当前月份(0-11,0代表1月) <br>
					myDate.getDate();       //获取当前日(1-31) <br>
					myDate.getDay();        //获取当前星期X(0-6,0代表星期天) <br>
					myDate.getTime();       //获取当前时间(从1970.1.1开始的毫秒数)   时间戳！！<br>
					myDate.getHours();      //获取当前小时数(0-23) <br>
					myDate.getMinutes();    //获取当前分钟数(0-59) <br>
					myDate.getSeconds();    //获取当前秒数(0-59) <br>
					myDate.getMilliseconds();   //获取当前毫秒数(0-999) <br>
					myDate.toLocaleDateString();    //获取当前日期 <br>
					myDate.toLocaleTimeString();    //获取当前时间 <br>
					myDate.toLocaleString( );       //获取日期与时间 </p>
				<p> 3.计算之前或未来的时间 <br>
					var myDate = new Date(); <br>
					myDate.setDate(myDate.getDate() + 10);  //当前时间加10天 <br>
					//类似的方法都基本相同,以set开头,具体参考第2点 </p>
				<p> 4.计算两个日期的偏移量 <br>
					var i = daysBetween(beginDate,endDate); //返回天数 <br>
					var i = beginDate.getTimezoneOffset(endDate); //返回分钟数 </p>
				<p> 5.检查有效日期 <br>
					//checkDate() 只允许&quot;mm-dd-yyyy&quot;或&quot;mm/dd/yyyy&quot;两种格式的日期 <br>
					if( checkDate(&quot;2006-01-01&quot;) ){ } <br>
					<br>
					//正则表达式(自己写的检查 yyyy-mm-dd, yy-mm-dd, yyyy/mm/dd, yy/mm/dd 四种) <br>
					var r = /^(\d{2}|\d{4})[\/-]\d{1,2}[\/-]\d{1,2}$/; <br>
					if( r.test( myString ) ){ } </p>
			</dd>
		</dl>
	</div>
</div>
<div id="footer"> 
感谢您在百忙之中抽出宝贵的时间阅读我的简历 <br>
热切期盼　您的回复<br></div>
 
 </body>
 </html>
