<!DOCTYPE HTML>
<html> 
<head>
<meta charset="utf-8">

<title>Web前端开发工程师夏青的经验积累之jQuery</title>
<meta name="Keywords" content="夏青工作经验，css经验" >
<meta name="Description" content="夏青作为一名前端开发人精通HTML+CSS网页布局与样式，熟练使用HTML5与CSS3.0。制作出页面能兼容各种主流浏览器。例如IE6、IE8、Fire Fox、Opera等；" />

<script type="text/javascript" src="js/mobi.js"></script>
<script type="text/javascript" src="js/ie6.js"></script>
<script type="text/javascript"  src="js/jquery-1.8.3.min.js"></script>
<script type="text/javascript" src="js/jquery.cookie.js"></script>
<script type="text/javascript" src="js/changeSkin.js"></script>
<script type="text/javascript" src="js/fisheye-iutil.min.js"></script>
<script type="text/javascript" src="js/nav.js"></script>
<script type="text/javascript" src="js/toTop.js"></script>

<script type="text/javascript" src="js/experience.js"></script>

<link rel="stylesheet" type="text/css" href="css/style.css">
<link rel="stylesheet" type="text/css" href="css/skin5.css" id="skin">
 <link rel="icon" href="images/xiaqing.gif" type="image/gif" />
</head>
<body>
<div id="top">

  <div class="right-sidebar">
    <ul id="choose-skin">
      <li data-theme="skin1" class="mosaic">mosaic</li>
      <li data-theme="skin2" class="wall">wall</li>
      <li data-theme="skin3" class="prairie">prairie</li>
      <li data-theme="skin4" class="sky">sky</li>
      <li data-theme="skin5" class="ink cur">ink</li>
    </ul>
    
   </div>
  
  
  <h1 id="logo"><a href="index.html"><img src="images/logo.png" width="227" height="64" alt="夏青-前端开发" /></a></h1>
  <div id="nav">
    <div class="dock-container"> <a href="index.htm"><span>我的首页</span><img src="images/home.png" alt="我的首页" /></a> <a href="work-style1.htm"><span>我的作品</span><img src="images/portfolio.png" alt="我的作品" /></a> <a href="javascript.htm"><span>我的经验</span><img src="images/history.png" alt="我的经验" /></a> <a href="book.htm"><span>我的书架</span><img src="images/book.png" alt="我的书架" /></a> <a href="resume.htm"><span>我的简历</span><img src="images/calendar.png" alt="我的简历" /></a> <a href="contact.htm"><span>与我联系</span><img src="images/email.png" alt="与我联系" /></a> </div>
  </div>
     
  <div id="my-head"><img src="images/head.png" width="510" height="253" /></div>
  </div>
<div id="left-hand" class="animated pulse"><img src="images/LeftSideHand.png" width="202" height="429" /></div>
<div id="right-hand" class="animated fadeInUpBig"><img src="images/RightSideHand.png" width="369" height="446" /></div>
<a id="to-top" href="#top"></a> 
<ul id="experience-nav">
		<li><a href="javascript.htm">JavaScript</a></li>
	<li><a href="jquery.htm">jQuery</a></li>
	<li><a href="ie6.htm">IE6</a></li>
	<li><a href="htmlcss.htm">HTML+CSS</a></li>
	<li><a href="usefulsites.htm">常用网站</a></li>
</ul>

<div id="main"> 
	<h2>经验积累之&nbsp;<strong>jQuery</strong></h2>
	<div class="tag"><a href="jquery-ui.html">jQuery UI</a></div>
	<div id="experience" class="animated fadeInRight">
		<dl>
			<dt>getXMl</dt>
			<dd>$.get(&quot;people.xml&quot;,function(data){<br>
				var content =&quot;&quot;;<br>
				content += $(data).find(&quot;name&quot;).text() + &quot;&lt;br /&gt;&quot;;<br>
				content += $(data).find(&quot;age&quot;).text()  + &quot;&lt;br /&gt;&quot; ;<br>
				alert(content)<br>
				},&quot;xml&quot;);</dd>
		</dl>
		<dl>
			<dt>get与getJSON</dt>
			<dd>$.get(&quot;people.json&quot;,function(data){<br>
				var content =&quot;&quot;;<br>
				content += data.name + &quot;&lt;br /&gt;&quot;;<br>
				content += data.age + &quot;&lt;br /&gt;&quot; ;<br>
				alert(content)<br>
				},&quot;json&quot;);<br>
				-------------------------------------<br>
				$.getJSON(&quot;people.json&quot;,function(data){<br>
				var content =&quot;&quot;;<br>
				content += data.name + &quot;&lt;br /&gt;&quot;;<br>
				content += data.age + &quot;&lt;br /&gt;&quot; ;<br>
				alert(content)<br>
				});<br>
			</dd>
		</dl>
		<dl>
			<dt>getJSON方法</dt>
			<dd>
				<p>$.getJSON(&quot;people.json&quot;, function(JSONObject){<br>
					$(&quot;#jname&quot;).html(JSONObject.name)<br>
					$(&quot;#jage&quot;).html(JSONObject.age)<br>
					$(&quot;#jstreet&quot;).html(JSONObject.street)<br>
					$(&quot;#jphone&quot;).html(JSONObject.phone)<br>
					});<br>
					<br>
				</p>
				<p>people.json</p>
				<p>{<br>
					&quot;name&quot;:&quot;lancer&quot;,<br>
					&quot;street&quot;:&quot;Fifth Avenue New York 666&quot;,<br>
					&quot;age&quot;:56,<br>
					&quot;phone&quot;:&quot;555 1234567&quot;<br>
					}</p>
				<br>
				------------------------------------------------- <br>
				$.getJSON(&quot;people.json&quot;,function(data){<br>
				var content =&quot;&quot;;<br>
				$.each(data,function(index,info){<br>
				content += info[&quot;name&quot;] + &quot;&lt;br /&gt;&quot;;<br>
				content += info[&quot;age&quot;] + &quot;&lt;br /&gt;&quot; <br>
				}); <br>
				});<br>
				$(&quot;.show&quot;).html(content)<br>
				[<br>
				{<br>
				&quot;name&quot;:&quot;lancer&quot;,<br>
				&quot;age&quot;:24<br>
				},<br>
				{<br>
				&quot;name&quot;:&quot;lara&quot;,<br>
				&quot;age&quot;:21<br>
				}<br>
				] }); </dd>
		</dl>
		<dl>
			<dt>cookie操作</dt>
			<dd>jQuery操作cookie的插件,大概的使用方法如下<br>
				example $.cookie(’the_cookie’, ‘the_value’);<br>
				设置cookie的值<br>
				example $.cookie(’the_cookie’, ‘the_value’, {expires: 7, path: ‘/’, domain: ‘jquery.com’, secure: true});<br>
				新建一个cookie 包括有效期 路径 域名等<br>
				example $.cookie(’the_cookie’, ‘the_value’);<br>
				新建cookie<br>
				example $.cookie(’the_cookie’, null);<br>
				删除一个cookie</dd>
		</dl>
		<dl>
			<dt>target的用法</dt>
			<dd>
				<p>$(function(){<br>
					$(&quot;#num&quot;).click(function(e){<br>
					var cur;<br>
					if(e==null)<br>
					{<br>
					CUR =  window.e.srcElement; <br>
					}<br>
					else<br>
					{<br>
					cur = e.target <br>
					}<br>
					$(cur).css(&quot;color&quot;,&quot;red&quot;)<br>
					}); <br>
					});</p>
				<p>&lt;div id=&quot;num&quot;&gt;<br>
					&lt;p&gt;1&lt;/p&gt;<br>
					&lt;p&gt;2&lt;/p&gt;<br>
					&lt;p&gt;3&lt;/p&gt;<br>
					&lt;p&gt;4&lt;/p&gt;<br>
					&lt;p&gt;5&lt;/p&gt;<br>
					&lt;p&gt;6&lt;/p&gt;<br>
					&lt;p&gt;7&lt;/p&gt;<br>
					&lt;p&gt;8&lt;/p&gt;<br>
					&lt;/div&gt;</p>
			</dd>
		</dl>
		<dl>
			<dt>5屏焦点图</dt>
			<dd>$(&quot;.focus ul li:first&quot;).show();<br>
				$(&quot;.focus ol li:first&quot;).addClass(&quot;cur&quot;);<br>
				var Cur = 0;<br>
				var int;<br>
				$(&quot;.focus ol li&quot;).mouseover(function(){<br>
				Cur = $(this).index();<br>
				$(this).addClass(&quot;cur&quot;).siblings().removeClass(&quot;cur&quot;);<br>
				$(&quot;.focus ul li&quot;).eq(Cur).fadeIn().addClass(&quot;cur&quot;).siblings().fadeOut().removeClass(&quot;cur&quot;);<br>
				clearInterval(int)<br>
				});<br>
				$(&quot;.focus ol li&quot;).mouseout(function(){<br>
				int = setInterval(focusPic,4000)<br>
				});<br>
				function focusPic(){ <br>
				if(Cur &lt;=4)<br>
				{<br>
				Cur ++; <br>
				} <br>
				else<br>
				{<br>
				Cur = 0; <br>
				}<br>
				$(&quot;.focus ol li&quot;).eq(Cur).addClass(&quot;cur&quot;).siblings().removeClass(&quot;cur&quot;);<br>
				$(&quot;.focus ul li&quot;).eq(Cur).fadeIn(1000).addClass(&quot;cur&quot;).siblings().fadeOut(1500).removeClass(&quot;cur&quot;);<br>
				}<br>
				int = setInterval(focusPic,4000)</dd>
		</dl>
		<dl>
			<dt>方法大全</dt>
			<dd>
				<p>Attribute： <br>
					$(&quot;p&quot;).addClass(css中定义的样式类型); 给某个元素添加样式 <br>
					$(&quot;img&quot;).attr({src:&quot;test.jpg&quot;,alt:&quot;test Image&quot;}); 给某个元素添加属性/值，参数是map <br>
					$(&quot;img&quot;).attr(&quot;src&quot;,&quot;test.jpg&quot;); 给某个元素添加属性/值 <br>
					$(&quot;img&quot;).attr(&quot;title&quot;, function() { return this.src }); 给某个元素添加属性/值 <br>
					$(&quot;元素名称&quot;).html(); 获得该元素内的内容（元素，文本等） <br>
					$(&quot;元素名称&quot;).html(&quot;&lt;b&gt;new stuff&lt;/b&gt;&quot;); 给某元素设置内容 <br>
					$(&quot;元素名称&quot;).removeAttr(&quot;属性名称&quot;) 给某元素删除指定的属性以及该属性的值 <br>
					$(&quot;元素名称&quot;).removeClass(&quot;class&quot;) 给某元素删除指定的样式 <br>
					$(&quot;元素名称&quot;).text(); 获得该元素的文本 <br>
					$(&quot;元素名称&quot;).text(value); 设置该元素的文本值为value <br>
					$(&quot;元素名称&quot;).toggleClass(class) 当元素存在参数中的样式的时候取消,如果不存在就设置此样式 <br>
					$(&quot;input元素名称&quot;).val(); 获取input元素的值 <br>
					$(&quot;input元素名称&quot;).val(value); 设置input元素的值为value <br>
					Manipulation： <br>
					$(&quot;元素名称&quot;).after(content); 在匹配元素后面添加内容 <br>
					$(&quot;元素名称&quot;).append(content); 将content作为元素的内容插入到该元素的后面 <br>
					$(&quot;元素名称&quot;).appendTo(content); 在content后接元素 <br>
					$(&quot;元素名称&quot;).before(content); 与after方法相反 <br>
					$(&quot;元素名称&quot;).clone(布尔表达式) 当布尔表达式为真时，克隆元素（无参时，当作true处理） <br>
					$(&quot;元素名称&quot;).empty() 将该元素的内容设置为空 <br>
					$(&quot;元素名称&quot;).insertAfter(content); 将该元素插入到content之后 <br>
					$(&quot;元素名称&quot;).insertBefore(content); 将该元素插入到content之前 <br>
					$(&quot;元素&quot;).prepend(content); 将content作为该元素的一部分，放到该元素的最前面 <br>
					$(&quot;元素&quot;).prependTo(content); 将该元素作为content的一部分，放content的最前面 <br>
					$(&quot;元素&quot;).remove(); 删除所有的指定元素 <br>
					$(&quot;元素&quot;).remove(&quot;exp&quot;); 删除所有含有exp的元素 <br>
					$(&quot;元素&quot;).wrap(&quot;html&quot;); 用html来包围该元素 <br>
					$(&quot;元素&quot;).wrap(element); 用element来包围该元素 <br>
					Traversing： <br>
					add(expr) <br>
					add(html) <br>
					add(elements) <br>
					children(expr) <br>
					contains(str) <br>
					end() <br>
					filter(expression) <br>
					filter(filter) <br>
					find(expr) <br>
					is(expr) <br>
					next(expr) <br>
					not(el) <br>
					not(expr) <br>
					not(elems) <br>
					parent(expr) <br>
					parents(expr) <br>
					prev(expr) <br>
					siblings(expr) </p>
				<p>Core： <br>
					$(html).appendTo(&quot;body&quot;) 相当于在body中写了一段html代码 <br>
					$(elems) 获得DOM上的某个元素 <br>
					$(function(){……..}); 执行一个函数 <br>
					$(&quot;div &gt; p&quot;).css(&quot;border&quot;, &quot;1px solid gray&quot;); 查找所有div的子节点p，添加样式 <br>
					$(&quot;input:radio&quot;, document.forms[0]) 在当前页面的第一个表单中查找所有的单选按钮 <br>
					$.extend(prop) prop是一个jQuery对象， <br>
					举例： <br>
					jQuery.extend({ <br>
					min: function(a, b) { return a &lt; b ? a : b; }, <br>
					max: function(a, b) { return a &gt; b ? a : b; } <br>
					}); <br>
					jQuery( expression, [context] ) —$( expression, [context]); 在默认情况下，$()查询的是当前HTML文档中的DOM元素。 </p>
				<p>each( callback ) 以每一个匹配的元素作为上下文来执行一个函数 <br>
					举例：1 <br>
					$(&quot;span&quot;).click(function){ <br>
					$(&quot;li&quot;).each(function(){ <br>
					$(this).toggleClass(&quot;example&quot;); <br>
					}); <br>
					}); <br>
					举例：2 <br>
					$(&quot;button&quot;).click(function () { <br>
					$(&quot;div&quot;).each(function (index, domEle) { <br>
					// domEle == this <br>
					$(domEle).css(&quot;backgroundColor&quot;, &quot;yellow&quot;); <br>
					if ($(this).is(&quot;#stop&quot;)) { <br>
					$(&quot;span&quot;).text(&quot;Stopped at div index #&quot; + index); <br>
					return false; <br>
					} <br>
					}); <br>
					}); </p>
				<p>jQuery Event: </p>
				<p>ready(fn); $(document).ready()注意在body中没有onload事件，否则该函数不能执行。在每个页面中可以 <br>
					有很多个函数被加载执行，按照fn的顺序来执行。 <br>
					bind( type, [data], fn ) 为每一个匹配元素的特定事件（像click）绑定一个或多个事件处理器函数。可能的事件属性有：blur, focus, load, resize, scroll, unload, click, dblclick, mousedown, mouseup, mousemove, <br>
					mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, <br>
					keyup, error <br>
					one( type, [data], fn ) 为每一个匹配元素的特定事件（像click）绑定一个或多个事件处理器函数。在每个对 <br>
					象上，这个事件处理函数只会被执行一次。其他规则与bind()函数相同。 </p>
				<p>trigger( type, [data] ) 在每一个匹配的元素上触发某类事件。 <br>
					triggerHandler( type, [data] ) 这一特定方法会触发一个元素上特定的事件(指定一个事件类型)，同时取消浏览器对此事件的默认行动 <br>
					unbind( [type], [data] ) 反绑定，从每一个匹配的元素中删除绑定的事件。 <br>
					$(&quot;p&quot;).unbind() 移除所有段落上的所有绑定的事件 <br>
					$(&quot;p&quot;).unbind( &quot;click&quot; ) 移除所有段落上的click事件 <br>
					hover( over, out ) over,out都是方法, 当鼠标移动到一个匹配的元素上面时，会触发指定的第一个函数。当鼠标移出这个元素时，会触发指定的第二个函数。 <br>
					$(&quot;p&quot;).hover(function(){ <br>
					$(this).addClass(&quot;over&quot;); <br>
					}, <br>
					function(){ <br>
					$(this).addClass(&quot;out&quot;); <br>
					} <br>
					); </p>
				<p>toggle( fn, fn ) 如果点击了一个匹配的元素，则触发指定的第一个函数，当再次点击同一元素时，则触发指定的第二个函数。 <br>
					$(&quot;p&quot;).toggle(function(){ <br>
					$(this).addClass(&quot;selected&quot;); <br>
					}, <br>
					function(){ <br>
					$(this).removeClass(&quot;selected&quot;); <br>
					} <br>
					); </p>
				<p>元素事件列表说明 <br>
					注：不带参数的函数，其参数为可选的 fn。jQuery不支持form元素的reset事件。 <br>
					事件 描述 支持元素或对象 <br>
					blur( ) 元素失去焦点 a, input, textarea, button, select, label, map, area <br>
					change( ) 用户改变域的内容 input, textarea, select <br>
					click( ) 鼠标点击某个对象 几乎所有元素 <br>
					dblclick( ) 鼠标双击某个对象 几乎所有元素 <br>
					error( ) 当加载文档或图像时发生某个错误 window, img <br>
					focus( ) 元素获得焦点 a, input, textarea, button, select, label, map, area <br>
					keydown( ) 某个键盘的键被按下 几乎所有元素 <br>
					keypress( ) 某个键盘的键被按下或按住 几乎所有元素 <br>
					keyup( ) 某个键盘的键被松开 几乎所有元素 <br>
					load( fn ) 某个页面或图像被完成加载 window, img <br>
					mousedown( fn ) 某个鼠标按键被按下 几乎所有元素 <br>
					mousemove( fn ) 鼠标被移动 几乎所有元素 <br>
					mouseout( fn ) 鼠标从某元素移开 几乎所有元素 <br>
					mouseover( fn ) 鼠标被移到某元素之上 几乎所有元素 <br>
					mouseup( fn ) 某个鼠标按键被松开 几乎所有元素 <br>
					resize( fn ) 窗口或框架被调整尺寸 window, iframe, frame <br>
					scroll( fn ) 滚动文档的可视部分时 window <br>
					select( ) 文本被选定 document, input, textarea <br>
					submit( ) 提交按钮被点击 form <br>
					unload( fn ) 用户退出页面 window </p>
				<p>JQuery Ajax 方法说明: </p>
				<p>load( url, [data], [callback] ) 装入一个远程HTML内容到一个DOM结点。 <br>
					$(&quot;#feeds&quot;).load(&quot;feeds.html&quot;); 将feeds.html文件载入到id为feeds的div中 <br>
					$(&quot;#feeds&quot;).load(&quot;feeds.php&quot;, {limit: 25}, function(){ <br>
					alert(&quot;The last 25 entries in the feed have been loaded&quot;); <br>
					}); </p>
				<p>jQuery.get( url, [data], [callback] ) 使用GET请求一个页面。 <br>
					$.get(&quot;test.cgi&quot;, { name: &quot;John&quot;, time: &quot;2pm&quot; }, function(data){ <br>
					alert(&quot;Data Loaded: &quot; + data); <br>
					}); </p>
				<p>jQuery.getJSON( url, [data], [callback] ) 使用GET请求JSON数据。 <br>
					$.getJSON(&quot;test.js&quot;, { name: &quot;John&quot;, time: &quot;2pm&quot; }, function(json){ <br>
					alert(&quot;JSON Data: &quot; + json.users[3].name); <br>
					}); </p>
				<p>jQuery.getScript( url, [callback] ) 使用GET请求JavaScript文件并执行。 <br>
					$.getScript(&quot;test.js&quot;, function(){ <br>
					alert(&quot;Script loaded and executed.&quot;); <br>
					}); <br>
					jQuery.post( url, [data], [callback], [type] ) 使用POST请求一个页面。 </p>
				<p>ajaxComplete( callback ) 当一个AJAX请求结束后，执行一个函数。这是一个Ajax事件 <br>
					$(&quot;#msg&quot;).ajaxComplete(function(request, settings){ <br>
					$(this).append(&quot;&lt;li&gt;Request Complete.&lt;/li&gt;&quot;); <br>
					}); <br>
					ajaxError( callback ) 当一个AJAX请求失败后，执行一个函数。这是一个Ajax事件 <br>
					$(&quot;#msg&quot;).ajaxError(function(request, settings){ <br>
					$(this).append(&quot;&lt;li&gt;Error requesting page &quot; + settings.url + &quot;&lt;/li&gt;&quot;); <br>
					}); </p>
				<p>ajaxSend( callback ) 在一个AJAX请求发送时，执行一个函数。这是一个Ajax事件 <br>
					$(&quot;#msg&quot;).ajaxSend(function(evt, request, settings){ <br>
					$(this).append(&quot;&lt;li&lt;Starting request at &quot; + settings.url <br>
					+ &quot;&lt;/li&lt;&quot;); <br>
					}); </p>
				<p>ajaxStart( callback ) 在一个AJAX请求开始但还没有激活时，执行一个函数。这是一个Ajax事件 <br>
					当AJAX请求开始(并还没有激活时)显示loading信息 <br>
					$(&quot;#loading&quot;).ajaxStart(function(){ <br>
					$(this).show(); <br>
					}); </p>
				<p>ajaxStop( callback ) 当所有的AJAX都停止时，执行一个函数。这是一个Ajax事件 <br>
					当所有AJAX请求都停止时，隐藏loading信息。 <br>
					$(&quot;#loading&quot;).ajaxStop(function(){ <br>
					$(this).hide(); <br>
					}); </p>
				<p>ajaxSuccess( callback ) 当一个AJAX请求成功完成后，执行一个函数。这是一个Ajax事件 <br>
					当AJAX请求成功完成时，显示信息。 <br>
					$(&quot;#msg&quot;).ajaxSuccess(function(evt, request, settings){ <br>
					$(this).append(&quot;&lt;li&gt;Successful Request!&lt;/li&gt;&quot;); <br>
					}); </p>
				<p>jQuery.ajaxSetup( options ) 为所有的AJAX请求进行全局设置。查看$.ajax函数取得所有选项信息。 <br>
					设置默认的全局AJAX请求选项。 <br>
					$.ajaxSetup({ <br>
					url: &quot;/xmlhttp/&quot;, <br>
					global: false, <br>
					type: &quot;POST&quot; <br>
					}); <br>
					$.ajax({ data: myData }); </p>
				<p>serialize( ) 以名称和值的方式连接一组input元素。实现了正确表单元素序列 <br>
					function showValues() { <br>
					var str = $(&quot;form&quot;).serialize(); <br>
					$(&quot;#results&quot;).text(str); <br>
					} <br>
					$(&quot;:checkbox, :radio&quot;).click(showValues); <br>
					$(&quot;select&quot;).change(showValues); <br>
					showValues(); </p>
				<p>serializeArray( ) 连接所有的表单和表单元素(类似于.serialize()方法)，但是返回一个JSON数据格式。 <br>
					从form中取得一组值，显示出来 <br>
					function showValues() { <br>
					var fields = $(&quot;:input&quot;).serializeArray(); <br>
					alert(fields); <br>
					$(&quot;#results&quot;).empty(); <br>
					jQuery.each(fields, function(i, field){ <br>
					$(&quot;#results&quot;).append(field.value + &quot; &quot;); <br>
					}); <br>
					} <br>
					$(&quot;:checkbox, :radio&quot;).click(showValues); <br>
					$(&quot;select&quot;).change(showValues); <br>
					showValues(); </p>
				<p>JQuery Effects 方法说明 </p>
				<p>show( ) 显示隐藏的匹配元素。 <br>
					show( speed, [callback] ) 以优雅的动画显示所有匹配的元素，并在显示完成后可选地触发一个回调函数。 <br>
					hide( ) 隐藏所有的匹配元素。 <br>
					hide( speed, [callback] ) 以优雅的动画隐藏所有匹配的元素，并在显示完成后可选地触发一个回调函数 <br>
					toggle( ) 切换元素的可见状态。如果元素是可见的，切换为隐藏的；如果元素是隐藏的， <br>
					切换为可见的。 <br>
					slideDown( speed, [callback] ) 通过高度变化（向下增大）来动态地显示所有匹配的元素，在显示完成后可选 <br>
					地触发一个回调函数。这个动画效果只调整元素的高度，可以使匹配的元素以 <br>
					&quot;滑动&quot;的方式显示出来。 <br>
					slideUp( speed, [callback] ) 通过高度变化（向上减小）来动态地隐藏所有匹配的元素，在隐藏完成后可选地 <br>
					触发一个回调函数。这个动画效果只调整元素的高度，可以使匹配的元素以&quot;滑动&quot; <br>
					的方式隐藏起来。 <br>
					slideToggle( speed, [callback] ) 通过高度变化来切换所有匹配元素的可见性，并在切换完成后可选地触发一个回 <br>
					调函数。 这个动画效果只调整元素的高度，可以使匹配的元素以&quot;滑动&quot;的方式隐 <br>
					藏或显示。 <br>
					fadeIn( speed, [callback] ) 通过不透明度的变化来实现所有匹配元素的淡入效果，并在动画完成后可选地触 <br>
					发一个回调函数。 这个动画只调整元素的不透明度，也就是说所有匹配的元素的 <br>
					高度和宽度不会发生变化。 <br>
					fadeOut( speed, [callback] ) 通过不透明度的变化来实现所有匹配元素的淡出效果，并在动画完成后可选地触 <br>
					发一个回调函数。 这个动画只调整元素的不透明度，也就是说所有匹配的元素的 <br>
					高度和宽度不会发生变化。 <br>
					fadeTo( speed, opacity, [callback] ) 把所有匹配元素的不透明度以渐进方式调整到指定的不透明度，并在动画完成 <br>
					后可选地触发一个回调函数。 这个动画只调整元素的不透明度，也就是说所 <br>
					有匹配的元素的高度和宽度不会发生变化。 <br>
					stop( ) 停止所有匹配元素当前正在运行的动画。如果有动画处于队列当中，他们就会立即开始。 <br>
					queue( ) 取得第一个匹配元素的动画序列的引用(返回一个内容为函数的数组) <br>
					queue( callback ) 在每一个匹配元素的事件序列的末尾添加一个可执行函数，作为此元素的事件函数 <br>
					queue( queue ) 以一个新的动画序列代替所有匹配元素的原动画序列 <br>
					dequeue( ) 执行并移除动画序列前端的动画 <br>
					animate( params, [duration], [easing], [callback] ) 用于创建自定义动画的函数。 <br>
					animate( params, options ) 创建自定义动画的另一个方法。作用同上。 </p>
				<p>JQuery Traversing 方法说明 </p>
				<p>eq( index ) 从匹配的元素集合中取得一个指定位置的元素，index从0开始 <br>
					filter( expr ) 返回与指定表达式匹配的元素集合，可以使用&quot;,&quot;号分割多个expr，用于实现多个条件筛选 <br>
					filter( fn ) 利用一个特殊的函数来作为筛选条件移除集合中不匹配的元素。 <br>
					is( expr ) 用一个表达式来检查当前选择的元素集合，如果其中至少有一个元素符合这个给定的 <br>
					表达式就返回true。 <br>
					map( callback ) 将jQuery对象中的一组元素利用callback方法转换其值，然后添加到一个jQuery数组中。 <br>
					not( expr ) 从匹配的元素集合中删除与指定的表达式匹配的元素。 <br>
					slice( start, [end] ) 从匹配元素集合中取得一个子集，和内建的数组的slice方法相同。 <br>
					add( expr ) 把与表达式匹配的元素添加到jQuery对象中。 <br>
					children( [expr] ) 取得一个包含匹配的元素集合中每一个元素的所有子元素的元素集合。可选的过滤器 <br>
					将使这个方法只匹配符合的元素(只包括元素节点，不包括文本节点)。 <br>
					contents( ) 取得一个包含匹配的元素集合中每一个元素的所有子孙节点的集合(只包括元素节点，不 <br>
					包括文本节点)，如果元素为iframe，则取得其中的文档元素 <br>
					find( expr ) 搜索所有与指定表达式匹配的元素。 <br>
					next( [expr] ) 取得一个包含匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。 <br>
					nextAll( [expr] ) 取得一个包含匹配的元素集合中每一个元素所有的后面同辈元素的元素集合 <br>
					parent( [expr] ) 取得一个包含着所有匹配元素的唯一父元素的元素集合。 <br>
					parents( [expr] ) 取得一个包含着所有匹配元素的唯一祖先元素的元素集合（不包含根元素）。 <br>
					prev( [expr] ) 取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合。 <br>
					prevAll( [expr] ) 取得一个包含匹配的元素集合中每一个元素的之前所有同辈元素的元素集合。 <br>
					siblings( [expr] ) 取得一个包含匹配的元素集合中每一个元素的所有同辈元素的元素集合。 <br>
					andSelf( ) 将前一个匹配的元素集合添加到当前的集合中 <br>
					取得所有div元素和其中的p元素，添加border类属性。取得所有div元素中的p元素， <br>
					添加background类属性 <br>
					$(&quot;div&quot;).find(&quot;p&quot;).andSelf().addClass(&quot;border&quot;); <br>
					$(&quot;div&quot;).find(&quot;p&quot;).addClass(&quot;background&quot;); <br>
					end( ) 结束当前的操作，回到当前操作的前一个操作 <br>
					找到所有p元素其中的span元素集合，然后返回p元素集合，添加css属性 <br>
					$(&quot;p&quot;).find(&quot;span&quot;).end().css(&quot;border&quot;, &quot;2px red solid&quot;); </p>
				<p>JQuery Selectors 方法说明 </p>
				<p>基本选择器 <br>
					$(&quot;#myDiv&quot;) 匹配唯一的具有此id值的元素 <br>
					$(&quot;div&quot;) 匹配指定名称的所有元素 <br>
					$(&quot;.myClass&quot;) 匹配具有此class样式值的所有元素 <br>
					$(&quot;*&quot;) 匹配所有元素 <br>
					$(&quot;div,span,p.myClass&quot;) 联合所有匹配的选择器 <br>
					层叠选择器 <br>
					$(&quot;form input&quot;) 后代选择器，选择ancestor的所有子孙节点 <br>
					$(&quot;#main &gt; *&quot;) 子选择器，选择parent的所有子节点 <br>
					$(&quot;label + input&quot;) 临选择器，选择prev的下一个临节点 <br>
					$(&quot;#prev ~ div&quot;) 同胞选择器，选择prev的所有同胞节点 <br>
					基本过滤选择器 <br>
					$(&quot;tr:first&quot;) 匹配第一个选择的元素 <br>
					$(&quot;tr:last&quot;) 匹配最后一个选择的元素 <br>
					$(&quot;input:not(:checked) + span&quot;)从原元素集合中过滤掉匹配selector的所有元素（这里有是一个临选择器） <br>
					$(&quot;tr:even&quot;) 匹配集合中偶数位置的所有元素(从0开始) <br>
					$(&quot;tr:odd&quot;) 匹配集合中奇数位置的所有元素(从0开始) <br>
					$(&quot;td:eq(2)&quot;) 匹配集合中指定位置的元素(从0开始) <br>
					$(&quot;td:gt(4)&quot;) 匹配集合中指定位置之后的所有元素(从0开始) <br>
					$(&quot;td:gl(4)&quot;) 匹配集合中指定位置之前的所有元素(从0开始) <br>
					$(&quot;:header&quot;) 匹配所有标题 <br>
					$(&quot;div:animated&quot;) 匹配所有正在运行动画的所有元素 <br>
					内容过滤选择器 <br>
					$(&quot;div:contains('John')&quot;) 匹配含有指定文本的所有元素 <br>
					$(&quot;td:empty&quot;) 匹配所有空元素(只含有文本的元素不算空元素) <br>
					$(&quot;div:has(p)&quot;) 从原元素集合中再次匹配所有至少含有一个selector的所有元素 <br>
					$(&quot;td:parent&quot;) 匹配所有不为空的元素(含有文本的元素也算) <br>
					$(&quot;div:hidden&quot;) 匹配所有隐藏的元素，也包括表单的隐藏域 <br>
					$(&quot;div:visible&quot;) 匹配所有可见的元素 <br>
					属性过滤选择器 <br>
					$(&quot;div[id]&quot;) 匹配所有具有指定属性的元素 <br>
					$(&quot;input[name='newsletter']&quot;) 匹配所有具有指定属性值的元素 <br>
					$(&quot;input[name!='newsletter']&quot;) 匹配所有不具有指定属性值的元素 <br>
					$(&quot;input[name^='news']&quot;) 匹配所有指定属性值以value开头的元素 <br>
					$(&quot;input[name$='letter']&quot;) 匹配所有指定属性值以value结尾的元素 <br>
					$(&quot;input[name*='man']&quot;) 匹配所有指定属性值含有value字符的元素 <br>
					$(&quot;input[id][name$='man']&quot;) 匹配同时符合多个选择器的所有元素 <br>
					子元素过滤选择器 <br>
					$(&quot;ul li:nth-child(2)&quot;), <br>
					$(&quot;ul li:nth-child(odd)&quot;), 匹配父元素的第n个子元素 <br>
					$(&quot;ul li:nth-child(3n + 1)&quot;) </p>
				<p>$(&quot;div span:first-child&quot;) 匹配父元素的第1个子元素 <br>
					$(&quot;div span:last-child&quot;) 匹配父元素的最后1个子元素 <br>
					$(&quot;div button:only-child&quot;) 匹配父元素的唯一1个子元素 <br>
					表单元素选择器 <br>
					$(&quot;:input&quot;) 匹配所有的表单输入元素，包括所有类型的input, textarea, select 和 button <br>
					$(&quot;:text&quot;) 匹配所有类型为text的input元素 <br>
					$(&quot;:password&quot;) 匹配所有类型为password的input元素 <br>
					$(&quot;:radio&quot;) 匹配所有类型为radio的input元素 <br>
					$(&quot;:checkbox&quot;) 匹配所有类型为checkbox的input元素 <br>
					$(&quot;:submit&quot;) 匹配所有类型为submit的input元素 <br>
					$(&quot;:image&quot;) 匹配所有类型为image的input元素 <br>
					$(&quot;:reset&quot;) 匹配所有类型为reset的input元素 <br>
					$(&quot;:button&quot;) 匹配所有类型为button的input元素 <br>
					$(&quot;:file&quot;) 匹配所有类型为file的input元素 <br>
					$(&quot;:hidden&quot;) 匹配所有类型为hidden的input元素或表单的隐藏域 <br>
					表单元素过滤选择器 <br>
					$(&quot;:enabled&quot;) 匹配所有可操作的表单元素 <br>
					$(&quot;:disabled&quot;) 匹配所有不可操作的表单元素 <br>
					$(&quot;:checked&quot;) 匹配所有已点选的元素 <br>
					$(&quot;select option:selected&quot;) 匹配所有已选择的元素 </p>
				<p>JQuery CSS 方法说明 </p>
				<p>css( name ) 访问第一个匹配元素的样式属性。 <br>
					css( properties ) 把一个&quot;名/值对&quot;对象设置为所有匹配元素的样式属性。 <br>
					$(&quot;p&quot;).hover(function () { <br>
					$(this).css({ backgroundColor:&quot;yellow&quot;, fontWeight:&quot;bolder&quot; }); <br>
					}, function () { <br>
					var cssObj = { <br>
					backgroundColor: &quot;#ddd&quot;, <br>
					fontWeight: &quot;&quot;, <br>
					color: &quot;rgb(0,40,244)&quot; <br>
					} <br>
					$(this).css(cssObj); <br>
					}); <br>
					css( name, value ) 在所有匹配的元素中，设置一个样式属性的值。 <br>
					offset( ) 取得匹配的第一个元素相对于当前可视窗口的位置。返回的对象有2个属性， <br>
					top和left，属性值为整数。这个函数只能用于可见元素。 <br>
					var p = $(&quot;p:last&quot;); <br>
					var offset = p.offset(); <br>
					p.html( &quot;left: &quot; + offset.left + &quot;, top: &quot; + offset.top ); <br>
					width( ) 取得当前第一匹配的元素的宽度值， <br>
					width( val ) 为每个匹配的元素设置指定的宽度值。 <br>
					height( ) 取得当前第一匹配的元素的高度值， <br>
					height( val ) 为每个匹配的元素设置指定的高度值。 </p>
				<p>JQuery Utilities 方法说明 <br>
					jQuery.browser <br>
					.msie 表示ie <br>
					jQuery.browser.version 读取用户浏览器的版本信息 <br>
					jQuery.boxModel 检测用户浏览器针对当前页的显示是否基于W3C CSS的盒模型 <br>
					jQuery.isFunction( obj ) 检测传递的参数是否为function <br>
					function stub() { } <br>
					var objs = [ <br>
					function () {}, <br>
					{ x:15, y:20 }, <br>
					null, <br>
					stub, <br>
					&quot;function&quot; <br>
					]; <br>
					jQuery.each(objs, function (i) { <br>
					var isFunc = jQuery.isFunction(objs[i]); <br>
					$(&quot;span:eq( &quot; + i + &quot;)&quot;).text(isFunc); <br>
					}); <br>
					jQuery.trim( str ) 清除字符串两端的空格，使用正则表达式来清除给定字符两端的空格 <br>
					jQuery.each( object, callback ) 一个通用的迭代器，可以用来无缝迭代对象和数组 <br>
					jQuery.extend( target, object1, [objectN] ) 扩展一个对象，修改原来的对象并返回，这是一个强大的实现继承的 <br>
					工具，这种继承是采用传值的方法来实现的，而不是JavaScript中的 <br>
					原型链方式。 <br>
					合并settings和options对象，返回修改后的settings对象 <br>
					var settings = { validate: false, limit: 5, name: &quot;foo&quot; }; <br>
					var options = { validate: true, name: &quot;bar&quot; }; <br>
					jQuery.extend(settings, options); </p>
				<p>合并defaults和options对象，defaults对象并没有被修改。options对象中的值 <br>
					代替了defaults对象的值传递给了empty。 </p>
				<p>var empty = {} <br>
					var defaults = { validate: false, limit: 5, name: &quot;foo&quot; }; <br>
					var options = { validate: true, name: &quot;bar&quot; }; <br>
					var settings = $.extend(empty, defaults, options); <br>
					jQuery.grep( array, callback, [invert] ) 通过一个筛选函数来去除数组中的项 <br>
					$.grep( [0,1,2], function(n,i){ <br>
					return n &gt; 0; <br>
					}); <br>
					jQuery.makeArray( obj ) 将一个类似数组的对象转化为一个真正的数组 <br>
					将选取的div元素集合转化为一个数组 <br>
					var arr = jQuery.makeArray(document.getElementsByTagName(&quot;div&quot;)); <br>
					arr.reverse(); // use an Array method on list of dom elements <br>
					$(arr).appendTo(document.body); <br>
					jQuery.map( array, callback ) 使用某个方法修改一个数组中的项，然后返回一个新的数组 <br>
					jQuery.inArray( value, array ) 返回value在数组中的位置，如果没有找到，则返回-1 <br>
					jQuery.unique( array ) 删除数组中的所有重复元素，返回整理后的数组</p>
			</dd>
		</dl>
		<dl>
			<dt>自定义插件</dt>
			<dd>; (function($){<br>
				$.extend({<br>
				&quot;jiafa&quot; : function(num1,num2)	{<br>
				var jieguo = parseInt(num1)+parseInt(num2)<br>
				return jieguo <br>
				}<br>
				}) <br>
				})(jQuery);</dd>
		</dl>
		<dl>
			<dt>自定义方法</dt>
			<dd>
				<p>/*不带参数*/</p>
				<p>$.fn.extend({<br>
					toRed: function() <br>
					{ <br>
					$(this).css(&quot;background-color&quot;,&quot;#F00&quot;)<br>
					},<br>
					});<br>
					<br>
					/*带参数*/<br>
					<br>
					$.fn.extend({<br>
					changeColor: function(bccolor) <br>
					{ <br>
					$(this).css(&quot;background-color&quot;,bccolor)<br>
					},<br>
					});<br>
					<br>
					<br>
					$(&quot;#cm&quot;).click(function(){<br>
					$(this).toRed();<br>
					$(this).changeColor('#F00');</p>
				<p>});</p>
				<p>/*带点击事件*/</p>
				<p>$.fn.extend({ <br>
					alertWhileClick:function(){ <br>
					$(this).click(function(){ <br>
					alert($(this).val()); <br>
					}); <br>
					} <br>
					}); <br>
					$(&quot;#input1″).alertWhileClick(); //页面上为：&lt;input id=&quot;input1″ type=&quot;text&quot;/&gt; </p>
			</dd>
		</dl>
		<dl>
			<dt>板块样式</dt>
			<dd> var nowpage = $(&quot;.Crumbs b&quot;).text(); <br>
				$(&quot;.SubLeftMenu li a:contains('&quot; + nowpage + &quot;')&quot;).parent().addClass(&quot;Curr&quot;); </dd>
		</dl>
		<dl>
			<dt>对联</dt>
			<dd>function nowxy()<br>
				{<br>
				var st = $(document).scrollTop() + 105<br>
				$(&quot;.rightNav&quot;).animate({top:st},&quot;fast&quot;)<br>
				}<br>
				setInterval (nowxy,500)</dd>
		</dl>
	</div>
</div>
<div id="footer"> 
感谢您在百忙之中抽出宝贵的时间阅读我的简历 <br>
热切期盼　您的回复<br></div>
 
 </body>
 </html>
